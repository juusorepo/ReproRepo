[
  {
    "objectID": "babysteps.html",
    "href": "babysteps.html",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "",
    "text": "The idea of methods reproducibility is to provide sufficient documentation of procedures and data to enable repeating the same procedures, in a similar or different context (Goodman et al., 2016). A reproducible workflow, then, is a systematically organized sequence of steps to accomplish this. As the value placed on reproducibility continues to rise within and beyond academia, mastering these practices is increasingly beneficial. This tutorial aims to present the basics rather than delve into all the complexities of all advanced stuff. It covers steps from preparing data for analysis to creating reproducible tables and figures, to be included in a paper or presentation.\nThe basic steps for reproducible workflow covered here are:\nflowchart LR\n    step1(\"1. Set up the project &lt;br&gt; \")\n    step2(\"2. Prepare and analyse data &lt;br&gt; and generate outputs\")\n    step3(\"3. Prepare code and data &lt;br&gt; for sharing\")\n    step4(\"4. Share code and data in public\")\n    \n    step1 --&gt; step2 --&gt; step3 --&gt; step4\nA reproducible workflow enables you to:\nThe guide and provided code snippets serve as a template for initiating new projects or creating reproducible versions of existing ones. The best way to learn is to download the notebooks, experiment with the examples in RStudio, and adapt them to your project and preferences. To follow along, ensure that you have R and RStudio installed and up to date."
  },
  {
    "objectID": "babysteps.html#create-a-rstudio-project",
    "href": "babysteps.html#create-a-rstudio-project",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "1.1 Create a RStudio project",
    "text": "1.1 Create a RStudio project\n\nIn RStudio, start fresh and select File - New Project - New Directory - Quarto Project. It creates you a project folder with few files.\nCopy and run the below code in RStudio console window to download this notebook to your project folder. (or download the zip file and copy the files to your project folder).\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/babysteps.qmd\", \"babysteps.qmd\")\nOpen the notebook in RStudio.\nRun the below code chunk to install required packages. The Here package simplifies file path management by making all paths relative to the project root.\n\n\n\nCode: Load packages\n## Load packages: knitr and here\n# Here  for file path management and Knitr for dynamic report generation\n# Check if packages are installed, and install if not\nif (!requireNamespace(\"knitr\", quietly = TRUE)) {install.packages(\"knitr\")}\nif (!requireNamespace(\"here\", quietly = TRUE)) {install.packages(\"here\")}\n# Load packages\nrequire(knitr)\nrequire(here)"
  },
  {
    "objectID": "babysteps.html#creating-the-project-folder-structure",
    "href": "babysteps.html#creating-the-project-folder-structure",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "1.2 Creating the project folder structure",
    "text": "1.2 Creating the project folder structure\nThe code below will create a coherent folder structure for your project. You can modify the folder names for your own project as needed. Alternatively, you may create folders without code. Note these good practices when working with folders and files:\n\nNaming conventions for folders and files: only lowercase letters; no spaces but-dashes (or_underscores) instead. Prefix numbers with leading zeros ensure automatic sorting (01-data, 02-scripts…).\nRelative file paths. Always use relative folder paths for reproducibility. Relative means data/file.csv instead of absolute one: C:/Users/Documents…./file.csv\nHere -function. Wrap the file path with the here function to ensure the path is always relative to the project root and works in all contexts, e.g., here(\"data/file.csv\"). Requires R package Here.\nSeparate folders for public sharing. For our reproducible example, we will only need the folders: data, scripts, and supplementary for public sharing.\n\nRun the code below to create your folders.\n\n# List folder names into a vector object, folders not used for tutorial are commented out\nfolders &lt;- c(\n  \"01-data\",\n    \"01-data/raw\", # Unmodified, original raw data\n    \"01-data/processed\", # Data after cleaning or transformations\n    \"01-data/metadata\", # Codebooks, dictionaries etc.\n#   \"01-data/methods\", # Ethics, protocols, licenses etc.\n  \"02-scripts\", # Scripts for public sharing\n  \"03-supplementary\", # Additional material for public sharing\n  \"04-notebooks\", # Notebooks for running analyses and writing notes\n  \"05-outputs\",\n    \"05-outputs/figures\", # Main graphs and visualizations\n    \"05-outputs/tables\", # Main result tables\n#   \"05-outputs/manuscripts\", # Drafts and final versions of papers\n#   \"05-outputs/presentations\", # Slides, posters, etc.\n  \"99-archive\" # Archived materials, old versions \n)    \n# Create folders (loop through the vector) \nfor (folder in folders) {dir.create(folder, recursive = TRUE, showWarnings = TRUE)}\n# Print message\nmessage(\"Project folders created successfully.\")\n\n\n\n\n\n\n\nNote\n\n\n\nWhy was the reproducibility advocate bad at hide and seek?\nBecause they always left a trail to reproduce their steps!"
  },
  {
    "objectID": "babysteps.html#preparing-data-in-a-reproducible-way",
    "href": "babysteps.html#preparing-data-in-a-reproducible-way",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "2.1 Preparing data in a reproducible way",
    "text": "2.1 Preparing data in a reproducible way\nFor reproducibility, it is vital to keep the raw data untouched and create code which includes all steps done for processing and preparing the data for analysis. All data cleaning done in R ensures the transparency of your research.\nA good open science practice (when possible) is to simulate data when planning analysis or preregistering your study (Peikert et al., 2021). Once the empirical data is available, you can replace the simulated data - and get the results quicker.\n\n\n\n\n\nflowchart LR\n    step0(\"Simulate &lt;br&gt;and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse and &lt;br&gt;generate outputs\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Manuscript or&lt;br&gt; presentation\")\n    step6(\"Text\")\n    \n    step0 --&gt; step1 --&gt; step2 --&gt; step3 --&gt; step4a\n    step3 --&gt; step4b\n    step4a --&gt; step5\n    step4b --&gt; step5\n    step6 --&gt; step5\n\n\n\n\n\n\nFor this tutorial, we simulate a study on baby steps. In the first notebook we create raw data and a sample codebook.\n\nDownload the simulate-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\nIf you are reading this online, you can read the notebook here\n\n\n# Download simulate-data notebook (if not downloaded)\nif (file.exists(here(\"04-notebooks/00-simulate-data.qmd\"))) {\n  print(\"Notebooks already exists.\")\n} else {\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/00-simulate-data.qmd\", \n              \"04-notebooks/00-simulate-data.qmd\")\n}\nmessage(\"Notebook saved in your Notebooks -folder. Open and run the code.\")\n\nPrepare-data -notebook is an example and a template for creating reproducible steps for processing raw data.\n\nDownload the prepare-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\nIf you are reading this online, you can read the notebook here\n\n\n# Download prepare-data notebook (if not downloaded)\nif (file.exists(here(\"04-notebooks/01-prepare-data.qmd\"))) {\n  print(\"Notebook already exists.\")\n} else {\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/01-prepare-data.qmd\", \n             \"04-notebooks/01-prepare-data.qmd\")\n}\nmessage(\"Notebook saved in your Notebooks -folder. Open and run the code.\")\n\n\n\n\n\n\n\nTip\n\n\n\nYou can create a new notebook by selecting: File - New File - Quarto document (or R Notebook). For organizing your analyses in multiple notebooks, a good practice is to number them following your analytic plan / workflow."
  },
  {
    "objectID": "babysteps.html#step2c",
    "href": "babysteps.html#step2c",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "2.2 Creating reproducible analyses, tables and figures",
    "text": "2.2 Creating reproducible analyses, tables and figures\nThe next notebook shows how to create reproducible tables and figures in R. Also in APA style. This will avoid the need for copy-pasting values from R to a word processor, ensuring fewer errors and - better reproducibility! You can export the formatted table into Word, PowerPoint, HTML, or PDF.\n\nDownload the notebook by running the code below.\nOpen the notebook to follow and run the examples.\nIf you are reading this online, you can read the notebook here\n\n\n# Download a notebook for creating tables (if not downloaded)\nif (file.exists(here(\"04-notebooks/02-create-tables-and-figures.qmd\"))) {\n  print(\"Notebooks already exists.\")\n} else {\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/02-create-tables-and-figures.qmd\", \n              here(\"04-notebooks/02-create-tables-and-figures.qmd\"))\n}\nmessage(\"Descript -notebooks downloaded and saved in your notebooks -folder. Open and try!\")\n\n\n\n\n\n\n\nNote\n\n\n\nWhy did the scientist break up with reproducibility?\nBecause they wanted a relationship with fewer variables!"
  },
  {
    "objectID": "babysteps.html#preparing-code-for-public-sharing",
    "href": "babysteps.html#preparing-code-for-public-sharing",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.1 Preparing code for public sharing",
    "text": "3.1 Preparing code for public sharing\n\nComment the code. Make sure the code you plan to share is properly commented. Good practice is to write the comments before you write the code. If you lack comments, you can use Chat GPT to assist and review your code (with caution, naturally). With the prompt below, you can keep adding your scripts one at a time. Replace your code with the commented version, and test the code. Example prompt:\n\n\nDearest AI, please revise and improve the comments in my R script to increase its clarity and convey its purpose, without changing the code itself. Identify any errors separately and alert me to potential reproducibility issues. I will submit sections of the code sequentially for your review.\n\n\nUse README files. For complicated scripts and analyses, you can add a README text file with extensive documentation.\nFor a style guide for coding in R, see: style.tidyverse.org. It includes best practices for e.g., naming objects, and tools for reviewing your code.\nDocument R version and packages used. Documenting ‘dependencies’ ensures that future researchers can replicate the exact computational environment in which your analysis was conducted. With the report package, you can create this as a supplementary file with the code below.\n\n\n# Create a supplementary file with R version and packages used\n# load report package\nif (!requireNamespace(\"report\", quietly = TRUE)) {install.packages(\"report\")}\nrequire(report)\n\n# Create dependencies report\ndependencies &lt;- report(sessionInfo())\n\n# Export report as a supplementary text file \nwriteLines(dependencies, here(\"03-supplementary/dependencies.txt\"))\n\n# print a summary of the report\nmessage(\"Dependencies summary saved in the 03-supplementary -folder. A brief summary:\")\nsummary(report(sessionInfo()))\n\nThe analysis was done using the R Statistical language (v4.2.0; R Core Team,\n2022) on Ubuntu 22.04.4 LTS, using the packages report (v0.5.8), here (v1.0.1)\nand knitr (v1.45).\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor automated computational reproducibility, you can use renv for dependency management or Docker for containerization.\n\n\n\n3.1.1 Extracting code from notebooks - the PURL function\nAs you may have noticed from the example notebooks, we used notebooks also for personal notes and exploratory analyses. How can one manage all that in the same file? With help from the ‘purl’ function!\nThe “purl” function from the knitr package will extract all executable code from the notebooks and save them in in an .R script file - for public sharing. The trick is that it only extracts the code chunks with comments, not the notes (text outside code chunks) or results. In addition, the code chunks marked with purl=FALSE (in the title, see example below), will not be included in the .R script file created. Thus, you can keep draft analyses and personal notes in the same notebook with the code for public sharing.\n\nRun the code below to create .R script files from the notebooks.\nOpen an .R script file created to view the result.\n\n\n# Extract simulate-data: use purl to extract r-code from notebook into script file\npurl(\n    here(\"04-notebooks/00-simulate-data.qmd\"), # the source notebook \n    output=here(\"02-scripts/00-simulate-data.R\"), # the output script file\n    documentation = 1 # to include only the code chunks\n    )\n\n# Extract prepare-data\npurl(\n    here(\"04-notebooks/01-prepare-data.qmd\"), \n    output=here(\"02-scripts/01-prepare-data.R\"), \n    documentation = 1 \n    )\n\n# Extract create-tables-and-figures\npurl(here(\"04-notebooks/02-create-tables-and-figures.qmd\"), \n     output=here(\"02-scripts/02-create-tables-and-figures.R\"),\n     documentation = 1)"
  },
  {
    "objectID": "babysteps.html#running-the-analyses-from-r-script-files",
    "href": "babysteps.html#running-the-analyses-from-r-script-files",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.2 Running the analyses from R script files",
    "text": "3.2 Running the analyses from R script files\nAfter the R script files are created, it is better to test the scripts before sharing. However, all modifications should be made in notebooks, so you will not get lost with different versions. After adjustments, just run the purl function again to replace the script files.\nWith the code below, you can run all the analyses without opening the R script files. The full workflow in one code chunk!\n\nRestart R Session in RStudio: Select Session &gt; Restart R (good practice to ensure reproducibility).\nRun the below code chunk. Maybe better to run one row at a time, to check for errors (ctrl-enter).\n\n\n# Clear all objects from memory to ensure reproducibility\nrm(list = ls())\n# reload here as we emptied it from memory\nrequire(here)\n\n# 0 Simulate data\nsource(here(\"02-scripts/00-simulate-data.R\"))\n\n# 1 Prepare data\nsource(here(\"02-scripts/01-prepare-data.R\"))\n\n# 2 Run analyses to create tables and figures\nsource(here(\"02-scripts/02-create-tables-and-figures.R\"))\n\n\n\n\n\n\n\nNote\n\n\n\nLabeling each code chunk with “#| label: your-label” will split the script file into easily readable chunks."
  },
  {
    "objectID": "babysteps.html#sharing-notebooks-with-co-authors",
    "href": "babysteps.html#sharing-notebooks-with-co-authors",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.3 Sharing notebooks with co-authors",
    "text": "3.3 Sharing notebooks with co-authors\nBest way to share some analyses with your colleagues? Notebooks are great for that. They can be read in any browser and can include code and your notes and questions for your colleagues. Although maybe intimidating to show others your code, it’s an important step in making your research reproducible. With this example, we render/knit one notebook into html format for sharing,\n\nOpen one of the example notebooks, for example 01-prepare-data.qmd\nTo render your notebook in RStudio, click on the “Render” button. This process converts the notebook into an HTML file, facilitating easy sharing. To alter the output format, insert format: html at the notebook header, replacing html with pdf, docx, or another desired output format.\n\nSelect Render. RStudio will render the notebook into a .html file, which you can easily share. You can change the output format with inserting the following in the very top of the notebook “format: html” and changing the html to pdf, docx, or other format."
  },
  {
    "objectID": "babysteps.html#preparing-data-for-sharing",
    "href": "babysteps.html#preparing-data-for-sharing",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.4 Preparing data for sharing",
    "text": "3.4 Preparing data for sharing\nFor full reproducibility, share your raw data when possible. Check these steps before sharing:\n\nConsent. Ensure you have consent from the study participants and your institution to share the data.\nFormat. Make sure your data is in open file format like .csv.\nDocumentation. Include necessary documentation in the metadata folder (e.g., codebooks, readme, licenses, ethics). Use open file formats. See example codebook in the simulate-data notebook.\nDe-identify. If needed, prepare a de-identified version of your raw data to manage the risk of identifying individuals in the dataset.\n\n\n\n\n\n\n\nNote\n\n\n\nWhat’s a reproducible researcher’s favorite movie?\n“Groundhog Day” – they love seeing the same results every time!"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html",
    "href": "04-notebooks/01-prepare-data.html",
    "title": "Prepare data",
    "section": "",
    "text": "This notebook sets an example workflow and template for preparing raw data for analysis. The focus is on cleaning, coding, and transforming the data, which are crucial steps to ensure the reliability and validity of the analysis. All processing steps should be documented, including the determination of the sample size, any data exclusions, manipulations, and the creation of variables for the study.\nEDA (Exploratory Data Analysis) is integrated into the process to understand the distribution of the data and identify any issues that need addressing. After processing, the processed data is saved in CSV format. This approach keeps the raw data untouched and makes all processing steps transparent and reproducible.\n\n\n\n\n\nflowchart LR\n    step0(\"Load&lt;br&gt; raw data\") --&gt;\n    step1(\"Modify&lt;br&gt; Data Types\") --&gt;\n    step2(\"Initial&lt;br&gt; EDA\") --&gt;\n    step3(\"Data&lt;br&gt; Cleaning\") --&gt;\n    step4(\"Data&lt;br&gt; Transformations\") --&gt;\n    step5(\"Post-Cleaning&lt;br&gt; EDA\") --&gt;\n    step6(\"Save &lt;br&gt;the data\")\n\n\n\n\n\n\nWhy prepare data in a notebook instead of a script file?\n\nWorking in a notebook, rather than a script file, allows for the inclusion of exploratory data analysis and personal notes while processing data to ensure accurate processing. With the “purl” function, explained in the Babysteps tutorial, only the code chunks will be extracted and saved in a script file for public sharing. The full notebook is intended for personal and collegial use. Feel free to modify the notebook for your style and purposes.\n\n\n\nOverview: Start by loading required R packages and the dataset into your analysis environment. For the tutorial, we load the raw data created in the Simulate-data notebook.\n\n\nView code: Load packages and data\n# Load required packages\nrequire(here)\nrequire(tidyverse)\n\n# Load / download data\nif (file.exists(here(\"01-data/raw/babysteps-rawdata.csv\"))) {\n  dataset &lt;- read.csv(here(\"01-data/raw/babysteps-rawdata.csv\"))\n} else {\n  dataset &lt;-\n    read.csv(\n      \"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/01-data/raw/babysteps-rawdata.csv\"\n    )\n}\n\n\n\n\n\nBefore diving into EDA, it’s crucial to ensure that each variable in your dataset is stored in the most appropriate data type. Correct data types can improve computational efficiency and are essential for appropriate analysis techniques.\n\nAction Steps: Start by listing the current data types of variables in your dataset. This helps identify any variables that may be incorrectly typed, such as numeric variables recognized as character data due to formatting issues.\n\n\n# Display the current data types of all variables in the dataset\nstr(dataset)\n\n'data.frame':   300 obs. of  7 variables:\n $ BabyID     : int  1 1 1 2 2 2 3 3 3 4 ...\n $ StepType   : chr  \"Walking\" \"Walking\" \"Walking\" \"Walking\" ...\n $ AgeMonths  : int  18 18 18 17 17 17 21 21 21 16 ...\n $ Wave       : chr  \"T1\" \"T2\" \"T3\" \"T1\" ...\n $ SleepHours : int  9 9 9 9 8 7 14 13 15 14 ...\n $ PuzzleTime : int  49 47 48 43 48 35 54 41 55 80 ...\n $ GiggleCount: int  4 4 4 4 4 4 4 4 4 4 ...\n\n\n\nConvert Data Types: Based on the initial inspection, we convert variables to their correct data types. Common conversions include transforming character variables that represent categories into factors and ensuring numeric variables are not mistakenly treated as character or factor types.\n\n\n# Converting character variables to factors\ndataset &lt;- dataset %&gt;% mutate_if(is.character, as.factor)\n\n\n\n\nBefore further processing, you may want to conduct an exploratory data analysis (EDA) to gain insights into the dataset’s distribution and characteristics. There are various ways to do this and also packages for automated EDA analysis (e.g., DataExplorer, GGally, SmartEDA, Hmisc). For this tutorial, we will use the DataExplorer.\n\nAction Steps: Run the code below to create an EDA report. See results in Notebooks folder or here.\n\n\n# Load/Install DataExplorer package\nif (!requireNamespace(\"DataExplorer\", quietly = TRUE)) {install.packages(\"DataExplorer\")}\nrequire(DataExplorer)\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-initial\", Sys.Date(), sep=\"-\"), # filename\n        report_title = \"Initial EDA Report - Babysteps Dataset\",\n        y = 'PuzzleTime' # to set the outcome variable\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n\n\n\n\nThis step involves identifying and correcting issues in your dataset, such as missing values, errors, outliers, and standardizing variable names, to ensure data quality.\n\n\n\nOverview: Begin by identifying missing values in your dataset. Missing data can occur for various reasons, from non-response in surveys to errors in data entry.\nAction Steps: Use descriptive statistics to identify missing patterns and decide on appropriate methods for handling them, such as imputation or exclusion, based on the nature of your data.\n\n\n\n\n\nOverview: Data entry errors, inconsistencies in response formats, and other inaccuracies can significantly affect your analysis.\nAction Steps: Validate data ranges (e.g., ages within plausible limits) and consistency (e.g., gender coded uniformly). Correct identified errors where possible, or note them for exclusion or special consideration.\n\n\n\n\n\nOverview: Outliers can influence statistical analyses and may represent either genuine phenomena or data errors.\nAction Steps: Identify outliers through visual (e.g., boxplots) and statistical methods. Investigate their origins and decide whether to keep, adjust, or remove them, documenting your rationale.\n\n\n\n\nEnsure all variable names are in lowercase to maintain consistency across your dataset. This can help avoid case-sensitive errors in your analysis scripts.\n\n# lowercase all variables (good practice)\ndataset &lt;- dataset %&gt;% rename_all(tolower)\n\nTip. Check out clean.names() function from janitor package to clean up variable names.\n\n\n\n\nThis step encompasses the processes of adjusting your variables to better fit your analysis needs and preparing your data through various transformations. It ensures that your dataset is in the optimal form for analysis, addressing both the structure of your data and the scales of measurement.\n\n\n\nOverview: Recoding involves adjusting existing variables to better fit your analysis needs, such as combining categories of a nominal variable or changing measurement scales.\nAction Steps: Clearly define your recoding rules and apply them uniformly across your dataset. Document changes to ensure transparency and reproducibility.\n\n\n# Recode wave into an integer for regression analyses\ndataset$wave &lt;- as.integer(gsub(\"T\", \"\", dataset$wave))\n\n# create a new categorical variable AgeGroup\ndataset &lt;- dataset %&gt;%\n  mutate(agegroup = case_when(\n    agemonths &lt;= 14 ~ \"12-14 months\",\n    agemonths &lt;= 20 ~ \"15-20 months\",\n    TRUE ~ \"21-24 months\"\n  ))\n\n\n\n\n\nOverview: Variable scales may need normalization, especially when combining data from different sources or preparing for certain statistical analyses.\nAction Steps: Apply normalization techniques, such as z-score standardization or min-max scaling, to adjust scales. Choose a method appropriate for your data distribution and analysis requirements.\n\n\n\n\n\nOverview: Dummy variables are used to represent categorical data in binary form, which is necessary for many types of statistical modeling.\nAction Steps: Convert categorical variables into dummy variables as needed.\n\n\n\n\n\nAfter cleaning and transforming your data, perform another round of EDA to verify the data preparation steps’ effects and ensure the dataset is ready for analysis. Look for any remaining issues to check the data quality and structure post-cleaning.\n\n# Create the EDA report, define the outcome variable\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-processed\", Sys.Date(), sep=\" - \"),\n        report_title = \"EDA Report with processed data - Babysteps Dataset\",\n        y = 'puzzletime'\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n\n\n\n\n\n# Save in CSV format into processed data -subfolder\nwrite.csv(dataset, here(\"01-data/processed/babysteps.csv\"), row.names = FALSE)\nmessage(\"The processed dataset was saved in processed data folder\")\n\nThe processed dataset was saved in processed data folder"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#load-raw-data-and-packages",
    "href": "04-notebooks/01-prepare-data.html#load-raw-data-and-packages",
    "title": "Prepare data",
    "section": "",
    "text": "Overview: Start by loading required R packages and the dataset into your analysis environment. For the tutorial, we load the raw data created in the Simulate-data notebook.\n\n\nView code: Load packages and data\n# Load required packages\nrequire(here)\nrequire(tidyverse)\n\n# Load / download data\nif (file.exists(here(\"01-data/raw/babysteps-rawdata.csv\"))) {\n  dataset &lt;- read.csv(here(\"01-data/raw/babysteps-rawdata.csv\"))\n} else {\n  dataset &lt;-\n    read.csv(\n      \"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/01-data/raw/babysteps-rawdata.csv\"\n    )\n}"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#check-and-modify-data-types",
    "href": "04-notebooks/01-prepare-data.html#check-and-modify-data-types",
    "title": "Prepare data",
    "section": "",
    "text": "Before diving into EDA, it’s crucial to ensure that each variable in your dataset is stored in the most appropriate data type. Correct data types can improve computational efficiency and are essential for appropriate analysis techniques.\n\nAction Steps: Start by listing the current data types of variables in your dataset. This helps identify any variables that may be incorrectly typed, such as numeric variables recognized as character data due to formatting issues.\n\n\n# Display the current data types of all variables in the dataset\nstr(dataset)\n\n'data.frame':   300 obs. of  7 variables:\n $ BabyID     : int  1 1 1 2 2 2 3 3 3 4 ...\n $ StepType   : chr  \"Walking\" \"Walking\" \"Walking\" \"Walking\" ...\n $ AgeMonths  : int  18 18 18 17 17 17 21 21 21 16 ...\n $ Wave       : chr  \"T1\" \"T2\" \"T3\" \"T1\" ...\n $ SleepHours : int  9 9 9 9 8 7 14 13 15 14 ...\n $ PuzzleTime : int  49 47 48 43 48 35 54 41 55 80 ...\n $ GiggleCount: int  4 4 4 4 4 4 4 4 4 4 ...\n\n\n\nConvert Data Types: Based on the initial inspection, we convert variables to their correct data types. Common conversions include transforming character variables that represent categories into factors and ensuring numeric variables are not mistakenly treated as character or factor types.\n\n\n# Converting character variables to factors\ndataset &lt;- dataset %&gt;% mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#initial-exploratory-data-analysis",
    "href": "04-notebooks/01-prepare-data.html#initial-exploratory-data-analysis",
    "title": "Prepare data",
    "section": "",
    "text": "Before further processing, you may want to conduct an exploratory data analysis (EDA) to gain insights into the dataset’s distribution and characteristics. There are various ways to do this and also packages for automated EDA analysis (e.g., DataExplorer, GGally, SmartEDA, Hmisc). For this tutorial, we will use the DataExplorer.\n\nAction Steps: Run the code below to create an EDA report. See results in Notebooks folder or here.\n\n\n# Load/Install DataExplorer package\nif (!requireNamespace(\"DataExplorer\", quietly = TRUE)) {install.packages(\"DataExplorer\")}\nrequire(DataExplorer)\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-initial\", Sys.Date(), sep=\"-\"), # filename\n        report_title = \"Initial EDA Report - Babysteps Dataset\",\n        y = 'PuzzleTime' # to set the outcome variable\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#data-cleaning",
    "href": "04-notebooks/01-prepare-data.html#data-cleaning",
    "title": "Prepare data",
    "section": "",
    "text": "This step involves identifying and correcting issues in your dataset, such as missing values, errors, outliers, and standardizing variable names, to ensure data quality.\n\n\n\nOverview: Begin by identifying missing values in your dataset. Missing data can occur for various reasons, from non-response in surveys to errors in data entry.\nAction Steps: Use descriptive statistics to identify missing patterns and decide on appropriate methods for handling them, such as imputation or exclusion, based on the nature of your data.\n\n\n\n\n\nOverview: Data entry errors, inconsistencies in response formats, and other inaccuracies can significantly affect your analysis.\nAction Steps: Validate data ranges (e.g., ages within plausible limits) and consistency (e.g., gender coded uniformly). Correct identified errors where possible, or note them for exclusion or special consideration.\n\n\n\n\n\nOverview: Outliers can influence statistical analyses and may represent either genuine phenomena or data errors.\nAction Steps: Identify outliers through visual (e.g., boxplots) and statistical methods. Investigate their origins and decide whether to keep, adjust, or remove them, documenting your rationale.\n\n\n\n\nEnsure all variable names are in lowercase to maintain consistency across your dataset. This can help avoid case-sensitive errors in your analysis scripts.\n\n# lowercase all variables (good practice)\ndataset &lt;- dataset %&gt;% rename_all(tolower)\n\nTip. Check out clean.names() function from janitor package to clean up variable names."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#data-recoding-and-transformation",
    "href": "04-notebooks/01-prepare-data.html#data-recoding-and-transformation",
    "title": "Prepare data",
    "section": "",
    "text": "This step encompasses the processes of adjusting your variables to better fit your analysis needs and preparing your data through various transformations. It ensures that your dataset is in the optimal form for analysis, addressing both the structure of your data and the scales of measurement.\n\n\n\nOverview: Recoding involves adjusting existing variables to better fit your analysis needs, such as combining categories of a nominal variable or changing measurement scales.\nAction Steps: Clearly define your recoding rules and apply them uniformly across your dataset. Document changes to ensure transparency and reproducibility.\n\n\n# Recode wave into an integer for regression analyses\ndataset$wave &lt;- as.integer(gsub(\"T\", \"\", dataset$wave))\n\n# create a new categorical variable AgeGroup\ndataset &lt;- dataset %&gt;%\n  mutate(agegroup = case_when(\n    agemonths &lt;= 14 ~ \"12-14 months\",\n    agemonths &lt;= 20 ~ \"15-20 months\",\n    TRUE ~ \"21-24 months\"\n  ))\n\n\n\n\n\nOverview: Variable scales may need normalization, especially when combining data from different sources or preparing for certain statistical analyses.\nAction Steps: Apply normalization techniques, such as z-score standardization or min-max scaling, to adjust scales. Choose a method appropriate for your data distribution and analysis requirements.\n\n\n\n\n\nOverview: Dummy variables are used to represent categorical data in binary form, which is necessary for many types of statistical modeling.\nAction Steps: Convert categorical variables into dummy variables as needed."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#post-cleaning-eda",
    "href": "04-notebooks/01-prepare-data.html#post-cleaning-eda",
    "title": "Prepare data",
    "section": "",
    "text": "After cleaning and transforming your data, perform another round of EDA to verify the data preparation steps’ effects and ensure the dataset is ready for analysis. Look for any remaining issues to check the data quality and structure post-cleaning.\n\n# Create the EDA report, define the outcome variable\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-processed\", Sys.Date(), sep=\" - \"),\n        report_title = \"EDA Report with processed data - Babysteps Dataset\",\n        y = 'puzzletime'\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#save-the-processed-data",
    "href": "04-notebooks/01-prepare-data.html#save-the-processed-data",
    "title": "Prepare data",
    "section": "",
    "text": "# Save in CSV format into processed data -subfolder\nwrite.csv(dataset, here(\"01-data/processed/babysteps.csv\"), row.names = FALSE)\nmessage(\"The processed dataset was saved in processed data folder\")\n\nThe processed dataset was saved in processed data folder"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Babysteps for Reproducible Workflow in R",
    "section": "",
    "text": "Methods reproducibility means documenting procedures well enough so they can be repeated with similar or different data. A reproducible workflow organizes these steps systematically.\nThis tutorial covers the basics — from preparing data to making reproducible tables and figures for papers or presentations — without getting lost in too advanced topics. Basic knowledge of R and RStudio is recommended.\n\n Start the Tutorial"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html",
    "href": "01-data/metadata/codebook-babysteps.html",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Title: Longitudinal Study on Baby Steps and Developmental Progress\nDescription: The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\nAuthor: Jane Doe\nCreation Date: March 11, 2024\nLast Updated: March 12, 2024\nVersion: 1.0\n\n\n\nAuthor Contact: Jane Doe (email)\nInstitution: University of Data Science\n\n\n\nThis dataset is made available under the Creative Commons Attribution 4.0 International License (CC BY 4.0). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made.\n\n\n\nPlease cite this dataset as:\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]\n\n\n\n\nBabyID\n\nDescription: Unique identifier for each baby participant.\nType: Integer\nExample Values: 1, 2, 3, …, 100\n\nStepType\n\nDescription: The type of mobility the baby is primarily using at the time of observation.\nType: Categorical\nPossible Values: Crawling, Toddling, Walking\n\nAgeMonths\n\nDescription: Age of the baby at the time of observation, in months.\nType: Integer\nRange: 12-24 months\n\nObservationPoint\n\nDescription: The stage of observation in the longitudinal study.\nType: Categorical\nPossible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n\nPuzzleTime\n\nDescription: Time it takes for the baby to solve a simple puzzle, measured in seconds.\nType: Numeric\nExample Values: Values can range based on puzzle difficulty and baby’s skill level.\n\nGiggleCount\n\nDescription: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\nType: Integer\nExample Values: Non-negative values, varying by individual and task.\n\n\n\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations.\n\n\n\n\nThis dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities.\n\n\n\nThis study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345.\n\n\n\nWe thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#dataset-overview",
    "href": "01-data/metadata/codebook-babysteps.html#dataset-overview",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Title: Longitudinal Study on Baby Steps and Developmental Progress\nDescription: The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\nAuthor: Jane Doe\nCreation Date: March 11, 2024\nLast Updated: March 12, 2024\nVersion: 1.0"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#contact-information",
    "href": "01-data/metadata/codebook-babysteps.html#contact-information",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Author Contact: Jane Doe (email)\nInstitution: University of Data Science"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#license",
    "href": "01-data/metadata/codebook-babysteps.html#license",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This dataset is made available under the Creative Commons Attribution 4.0 International License (CC BY 4.0). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#citation",
    "href": "01-data/metadata/codebook-babysteps.html#citation",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Please cite this dataset as:\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#variables",
    "href": "01-data/metadata/codebook-babysteps.html#variables",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "BabyID\n\nDescription: Unique identifier for each baby participant.\nType: Integer\nExample Values: 1, 2, 3, …, 100\n\nStepType\n\nDescription: The type of mobility the baby is primarily using at the time of observation.\nType: Categorical\nPossible Values: Crawling, Toddling, Walking\n\nAgeMonths\n\nDescription: Age of the baby at the time of observation, in months.\nType: Integer\nRange: 12-24 months\n\nObservationPoint\n\nDescription: The stage of observation in the longitudinal study.\nType: Categorical\nPossible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n\nPuzzleTime\n\nDescription: Time it takes for the baby to solve a simple puzzle, measured in seconds.\nType: Numeric\nExample Values: Values can range based on puzzle difficulty and baby’s skill level.\n\nGiggleCount\n\nDescription: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\nType: Integer\nExample Values: Non-negative values, varying by individual and task.\n\n\n\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#use-cases",
    "href": "01-data/metadata/codebook-babysteps.html#use-cases",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#ethics-approval",
    "href": "01-data/metadata/codebook-babysteps.html#ethics-approval",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#acknowledgements",
    "href": "01-data/metadata/codebook-babysteps.html#acknowledgements",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "We thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "All feedback is highly valued. Especially ideas to make\nthings more simple and easy for non-coders.\nEmail: juuso.repo(a)utu.fi\nJuuso Repo\nSenior Researcher\nInvest Flagship Research Center\nUniversity of Turku, Finland\n————————————————————"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources for Reproducibility",
    "section": "",
    "text": "In the fascinating world of reproducibility, there is always more. See below some selected resources and references used in creating the tutorials (updated March 2024)."
  },
  {
    "objectID": "resources.html#guides-and-tutorials-on-reproducibility",
    "href": "resources.html#guides-and-tutorials-on-reproducibility",
    "title": "Resources for Reproducibility",
    "section": "1 Guides and tutorials on reproducibility",
    "text": "1 Guides and tutorials on reproducibility\n\nFORRT - Framework for Open and Reproducible Research (link)\nIntroduction to Reproducible Publications with RStudio (The Carpentries) (link)\nOpen Science Training Handbook (link)\nHarrell F E: R Workflow for Reproducible Data Analysis and Reporting (link)\nBauer, P. C., & Landesvatter, C. (2023). Writing a reproducible paper with RStudio and quarto. (link)\nPeikert, Aaron, & Diemerling, Hannes. (2023). Reproducible Research in R: A Workshop on How to Do the Same Thing More Than Once. Zenodo. https://doi.org/10.5281/zenodo.8069391\nPeikert, A., van Lissa, C. J., & Brandmaier, A. M. (2021). Reproducible Research in R: A Tutorial on How to Do the Same Thing More Than Once. Psych, 3(4), Article 4. https://doi.org/10.3390/psych3040053\nAEA Data Editor Guidance and tools (link)"
  },
  {
    "objectID": "resources.html#reproducibility-checklists",
    "href": "resources.html#reproducibility-checklists",
    "title": "Resources for Reproducibility",
    "section": "2 Reproducibility checklists",
    "text": "2 Reproducibility checklists\n\nData and Code Availability Standard by AEA Social Science Data Editors: https://datacodestandard.org/\nReproducibility checklist by Meta-Psychology journal\nJournal of Applied Psychology methods checklist 2022 (pdf link)\nWicherts, J. M., Veldkamp, C. L., Augusteijn, H. E., Bakker, M., Van Aert, R., & Van Assen, M. A. (2016). Degrees of freedom in planning, running, analyzing, and reporting psychological studies: A checklist to avoid p-hacking. Frontiers in psychology, 7, 222767. https://doi.org/10.3389/fpsyg.2016.01832\nLombaers, P., Bruin, J. de, & Schoot, R. van de. (2024). Reproducibility and Data storage Checklist for Active Learning-Aided Systematic Reviews. https://doi.org/10.31234/osf.io/g93zf"
  },
  {
    "objectID": "resources.html#r-packages-used-in-the-tutorials",
    "href": "resources.html#r-packages-used-in-the-tutorials",
    "title": "Resources for Reproducibility",
    "section": "3 R packages used in the tutorials",
    "text": "3 R packages used in the tutorials\n\nModelsummary - Creates tables and plots to present descriptive statistics and to summarize statistical models in R.\nFlextable - a framework to easily create tables for reporting and publications.\nReport - “From R to your manuscript”."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html",
    "href": "04-notebooks/02-create-tables-and-figures.html",
    "title": "Generating Reproducible Tables and Figures",
    "section": "",
    "text": "This notebook shows how to create reproducible tables in R, ready to be used in a publication or presentation. With this, you will avoid the need for copy-pasting values from R to word processor, avoiding errors and most importantly, ensuring better reproducibility.\nThis notebook is part of Babysteps for Reproducibility -tutorial. If you have not followed the full tutorial, no worries, the first code chunk downloads the example dataset."
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#export-table-1-to-different-formats",
    "href": "04-notebooks/02-create-tables-and-figures.html#export-table-1-to-different-formats",
    "title": "Generating Reproducible Tables and Figures",
    "section": "3.1 Export Table 1 to different formats",
    "text": "3.1 Export Table 1 to different formats\nContinuing with the flextable package, we can export the table created to Word, PowerPoint, HTML, image (PNG), or PDF. The code below will save different formats to the outputs/tables folder. The outputs can then be included in a paper or presentation.\n\n# To RTF (opens in e.g., Microsoft Word)\nsave_as_rtf(\n  \"Descriptive statistics for baseline data\" = tbl_sum,\n  path = here(\"05-outputs/tables/tbl1-desc.rtf\")\n)\n\n# To PowerPoint\nsave_as_pptx(\n  \"Descriptive statistics for baseline data\" = tbl_sum,\n  path = here(\"05-outputs/tables/tbl1-desc.pptx\")\n)\n\n# To HTML\nsave_as_html(tbl_sum, path = here(\"05-outputs/tables/tbl1-desc.html\"))\n\n# To image file\nsave_as_image(tbl_sum, path = here(\"05-outputs/tables/tbl1-desc.png\"))\n\n# If problems in creating image, install webshot package\n# if (!requireNamespace(\"webshot\", quietly = TRUE)) {install.packages(\"webshot\")}\n# require(webshot)"
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html",
    "href": "04-notebooks/00-simulate-data.html",
    "title": "Simulating data",
    "section": "",
    "text": "As part of the Babysteps for Reproducibility -tutorial, in this notebook, simulated raw data is generated and saved in CSV format. Additionally, an example codebook is created, serving as a metadata document that outlines the dataset’s contents, structure, and generation process. Simulating data before working with empirical data is a good practice because it allows for testing analytical methods, understanding potential outcomes, and ensuring that the data analysis workflow is robust and error-free. This preparatory step helps in planning and anticipating the needs and challenges of working with empirical data.\nAction steps:\nUnderstanding all the details of the code below is not necessary in following the tutorial.\nView code: Load packages\n# load / install tidyverse package for data manipulation\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {install.packages(\"tidyverse\")}\nrequire(tidyverse)\nrequire(here)"
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html#create-an-example-codebook",
    "href": "04-notebooks/00-simulate-data.html#create-an-example-codebook",
    "title": "Simulating data",
    "section": "1 Create an example codebook",
    "text": "1 Create an example codebook\n\n\nView code: Create codebook\n# Define and create a codebook\ncodebook &lt;- \"\n# Codebook for Longitudinal Baby Steps Dataset\n\n## Dataset Overview\n\n**Title:** Longitudinal Study on Baby Steps and Developmental Progress\n\n**Description:** The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\n\n**Author:** Jane Doe\n\n**Creation Date:** March 11, 2024\n\n**Last Updated:** March 12, 2024\n\n**Version:** 1.0\n\n## Contact Information\n\n**Author Contact:** Jane Doe (email)\n\n**Institution:** University of Data Science\n\n## License\n\nThis dataset is made available under the [Creative Commons Attribution 4.0 International License (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made.\n\n## Citation\n\nPlease cite this dataset as:\n\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]\n\n## Variables\n\n-   BabyID\n    -   Description: Unique identifier for each baby participant.\n    -   Type: Integer\n    -   Example Values: 1, 2, 3, ..., 100\n-   StepType\n    -   Description: The type of mobility the baby is primarily using at the time of observation.\n    -   Type: Categorical\n    -   Possible Values: Crawling, Toddling, Walking\n-   AgeMonths\n    -   Description: Age of the baby at the time of observation, in months.\n    -   Type: Integer\n    -   Range: 12-24 months\n-   ObservationPoint\n    -   Description: The stage of observation in the longitudinal study.\n    -   Type: Categorical\n    -   Possible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n-   PuzzleTime\n    -   Description: Time it takes for the baby to solve a simple puzzle, measured in seconds.\n    -   Type: Numeric\n    -   Example Values: Values can range based on puzzle difficulty and baby's skill level.\n-   GiggleCount\n    -   Description: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\n    -   Type: Integer\n    -   Example Values: Non-negative values, varying by individual and task.\n\n### Collection Method\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations.\n\n## Use Cases\n\nThis dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities.\n\n## Ethics Approval\n\nThis study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345.\n\n## Acknowledgements\n\nWe thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890.\n\"\n# Save the codebook content to a file\nwriteLines(codebook, here(\"01-data/metadata/codebook-babysteps.md\"))\nmessage(\"Codebook created and saved in folder: 01-data/metadata.\")\n\n\nCodebook created and saved in folder: 01-data/metadata."
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html#simulate-data",
    "href": "04-notebooks/00-simulate-data.html#simulate-data",
    "title": "Simulating data",
    "section": "2 Simulate data",
    "text": "2 Simulate data\n\n\nView code: Simulate data\n# Simulate data for the babysteps analysis example\n# Set seed for reproducibility\nset.seed(123) \n\n# Set parameters\nn_babies &lt;- 100\nobservations_per_baby &lt;- 3  # Each baby is observed in three waves\n\n# Create baby IDs and waves\nbaby_ids &lt;- rep(1:n_babies, each = observations_per_baby)\nwave &lt;- rep(c(\"T1\", \"T2\", \"T3\"), times = n_babies)\n\n# Assign step types randomly but consistently for each baby across observations (for simplicity)\nstep_type &lt;- rep(sample(c(\"Crawling\", \"Toddling\", \"Walking\"), n_babies, replace = TRUE), each = observations_per_baby)\n\n# Simulate age in months, ensuring full variation from 12 to 24 months and logical progression\nage_months_start &lt;- sample(12:22, n_babies, replace = TRUE)\nage_progression &lt;- list(0:2, 0:2, 0:2)\nage_months &lt;- rep(age_months_start, each = observations_per_baby) + rep(0:2, each = n_babies)\n# Adjust age_months to ensure it does not exceed 24 months\nage_months &lt;- pmin(age_months, 24)\n\n# Simulate variable sleep_hours across waves\nsleep_hours_adjustment &lt;- sample(-1:1, n_babies * observations_per_baby, replace = TRUE)\nsleep_hours &lt;- rep(sample(8:16, n_babies, replace = TRUE), each = observations_per_baby) + sleep_hours_adjustment\n\n# Simulate puzzle_time with variability\nnoise &lt;- rnorm(n = n_babies * observations_per_baby, mean = 0, sd = 5)\npuzzle_time &lt;- round(120 - (age_months - 12) * 3 - ifelse(step_type == \"Walking\", 20, ifelse(step_type == \"Toddling\", 15, 10)) - (18 - sleep_hours) * 4 + noise)\n\n# Simulate giggle_count based on the simulated characteristics\ngiggle_count &lt;- round(\n  ifelse(step_type == \"Walking\", 5, ifelse(step_type == \"Toddling\", 4, 3)) -\n  (age_months - min(age_months)) / (max(age_months) - min(age_months)) * 3 +\n  (sleep_hours - min(sleep_hours)) / (max(sleep_hours) - min(sleep_hours)) * 2\n)\n\n# Ensure giggle_count remains within a realistic range\ngiggle_count &lt;- pmin(pmax(giggle_count, 3), 10)\n\n# Dataframe creation\ndata &lt;- tibble(BabyID = baby_ids,\n                    StepType = step_type,\n                    AgeMonths = age_months,\n                    Wave = wave,\n                    SleepHours = sleep_hours,\n                    PuzzleTime = puzzle_time,\n                    GiggleCount = giggle_count)\n\n# Save the raw data into a csv file\nwrite.csv(data, here(\"01-data/raw/babysteps-rawdata.csv\"), row.names = FALSE)\nmessage(\"Raw data was created and saved in folder: 01-data/raw.\")\n\n\nTo follow the full tutorial, next step is Preparing data for analysis"
  }
]