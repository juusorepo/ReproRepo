[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Babysteps for Reproducible Workflow in R",
    "section": "",
    "text": "Methods reproducibility means documenting procedures well enough so they can be repeated with similar or different data. A reproducible workflow organizes these steps systematically.\nThis tutorial covers the basics — from preparing data to making reproducible tables and figures for papers or presentations — without getting lost in too advanced topics.\n\n Start the Tutorial"
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html",
    "href": "04-notebooks/00-simulate-data.html",
    "title": "Simulating data",
    "section": "",
    "text": "As part of the Babysteps for Reproducibility tutorial, in this notebook, simulated raw data is generated and saved in CSV format. Additionally, an example codebook is created, serving as a metadata document that outlines the dataset’s contents, structure, and generation process. Simulating data before working with empirical data is a good practice because it allows for testing analytical methods, understanding potential outcomes, and ensuring that the data analysis workflow is robust and error-free. This preparatory step helps in planning and anticipating the needs and challenges of working with actual data.\nAction steps:\nUnderstanding all the details of the code below is not necessary. The main point here is to create raw data for the reproducible workflow tutorial.\n```{r}\n#| label: setup-simulate\n#| warning: false\n#| message: false\n\n# load / install tidyverse package for data manipulation\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {install.packages(\"tidyverse\")}\nrequire(tidyverse)\nrequire(here)\n```"
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html#create-codebook",
    "href": "04-notebooks/00-simulate-data.html#create-codebook",
    "title": "Simulating data",
    "section": "1 Create codebook",
    "text": "1 Create codebook\n\n```{r}\n#| label: codebook\n\n# Define and create a codebook\ncodebook &lt;- \"\n# Codebook for Longitudinal Baby Steps Dataset\n\n## Dataset Overview\n\n**Title:** Longitudinal Study on Baby Steps and Developmental Progress\n\n**Description:** The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\n\n**Author:** Jane Doe\n\n**Creation Date:** March 11, 2024\n\n**Last Updated:** March 12, 2024\n\n**Version:** 1.0\n\n## Contact Information\n\n**Author Contact:** Jane Doe (email)\n\n**Institution:** University of Data Science\n\n## License\n\nThis dataset is made available under the [Creative Commons Attribution 4.0 International License (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made.\n\n## Citation\n\nPlease cite this dataset as:\n\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]\n\n## Variables\n\n-   BabyID\n    -   Description: Unique identifier for each baby participant.\n    -   Type: Integer\n    -   Example Values: 1, 2, 3, ..., 100\n-   StepType\n    -   Description: The type of mobility the baby is primarily using at the time of observation.\n    -   Type: Categorical\n    -   Possible Values: Crawling, Toddling, Walking\n-   AgeMonths\n    -   Description: Age of the baby at the time of observation, in months.\n    -   Type: Integer\n    -   Range: 12-24 months\n-   ObservationPoint\n    -   Description: The stage of observation in the longitudinal study.\n    -   Type: Categorical\n    -   Possible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n-   PuzzleTime\n    -   Description: Time it takes for the baby to solve a simple puzzle, measured in seconds.\n    -   Type: Numeric\n    -   Example Values: Values can range based on puzzle difficulty and baby's skill level.\n-   GiggleCount\n    -   Description: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\n    -   Type: Integer\n    -   Example Values: Non-negative values, varying by individual and task.\n\n### Collection Method\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations.\n\n## Use Cases\n\nThis dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities.\n\n## Ethics Approval\n\nThis study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345.\n\n## Acknowledgements\n\nWe thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890.\n\"\n# Save the codebook content to a file\nwriteLines(codebook, here(\"01-data/metadata/codebook-babysteps.md\"))\nmessage(\"Codebook created and saved in folder: 01-data/metadata.\")\n```\n\nCodebook created and saved in folder: 01-data/metadata."
  },
  {
    "objectID": "04-notebooks/00-simulate-data.html#simulate-data",
    "href": "04-notebooks/00-simulate-data.html#simulate-data",
    "title": "Simulating data",
    "section": "2 Simulate data",
    "text": "2 Simulate data\n\n```{r}\n#| label: simulate-data\n\n# Simulate data for the babysteps analysis example\n# Set seed for reproducibility\nset.seed(123) \n\n# Set parameters\nn_babies &lt;- 100\nobservations &lt;- 3\n# Create baby IDs\nbaby_ids &lt;- rep(1:n_babies, times = observations)\n# Assign step types randomly but consistently for each baby across observations\nstep_type &lt;- rep(sample(c(\"Crawling\", \"Toddling\", \"Walking\"), n_babies, replace = TRUE), times = observations)\n# Simulate age in months, ensuring logical progression over observations\nage_months &lt;- c(rep(sample(12:14, n_babies, replace = TRUE), 1),\n                rep(sample(15:20, n_babies, replace = TRUE), 1),\n                rep(sample(21:24, n_babies, replace = TRUE), 1))\n# Define waves of observation\nwave &lt;- rep(c(\"T1\", \"T2\", \"T3\"), each = n_babies)\n# Adding a random slope variable (SleepHours) and a control variable (FeedingType)\nsleep_hours &lt;- rep(sample(10:16, n_babies, replace = TRUE), times = observations)\nfeeding_type &lt;- rep(sample(c(\"Breastfed\", \"Formula\"), n_babies, replace = TRUE), times = observations)\n\n# PuzzleTime decreases as babies grow, with adjustments based on step_type, sleep_hours and feeding_type\npuzzle_time &lt;- round(runif(n_babies * observations, min = 30, max = 120) - \n                     (age_months - 12) * runif(n_babies * observations, min = 2, max = 4) - \n                     ifelse(step_type == \"Walking\", 15 + (age_months - 12) * 1,  \n                            ifelse(step_type == \"Toddling\", 10 + (age_months - 12) * 0.5,  \n                                   (age_months - 12) * 0.2)) -  \n                     ifelse(step_type == \"Walking\", (sleep_hours - 10) * 2,  \n                            ifelse(step_type == \"Toddling\", (sleep_hours - 10) * 1.5, \n                                   (sleep_hours - 10))), 1)\n\n# GiggleCount: Inversely related to PuzzleTime, adjusted for age and step_type\ngiggle_count &lt;- round((puzzle_time / runif(n_babies * observations, min = 2, max = 4)) +\n                      ifelse(step_type == \"Crawling\", 5, \n                             ifelse(step_type == \"Toddling\", 2, \n                                    0)) +\n                      # Interaction: Increase gigglecount with age, more so for advanced step types\n                      (age_months - 12) * \n                      ifelse(step_type == \"Walking\", 0.5, \n                             ifelse(step_type == \"Toddling\", 0.25, \n                                    ifelse(step_type == \"Crawling\", 0.1, 0))),\n                      0)\n\n# Dataframe creation\ndata &lt;- tibble(BabyID = baby_ids,\n               StepType = step_type,\n               AgeMonths = age_months,\n               Wave = wave,\n               SleepHours = sleep_hours,\n               FeedingType = feeding_type,\n               PuzzleTime = puzzle_time,\n               GiggleCount = giggle_count)\n\n\n# Save the raw data into a csv file\nwrite.csv(data, here(\"01-data/raw/babysteps-rawdata.csv\"), row.names = FALSE)\nmessage(\"Raw data was created and saved in folder: 01-data/raw.\")\n```\n\nRaw data was created and saved in folder: 01-data/raw."
  },
  {
    "objectID": "babysteps.html",
    "href": "babysteps.html",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "",
    "text": "The idea of methods reproducibility is to provide sufficient documentation of procedures and data to enable repeating the same procedures, in a similar or different context (Goodman et al., 2016). A reproducible workflow, then, is a systematically organized sequence of steps to accomplish this. As the value placed on reproducibility continues to rise within and beyond academia, mastering these practices is increasingly beneficial. This tutorial aims to present the basics rather than delve into all the complexities of all advanced stuff. It covers steps from preparing data for analysis to creating reproducible tables and figures, to be included in a paper or presentation.\nThe basic steps for reproducible workflow are:\nflowchart LR\n    step1(\"1. Set up the project &lt;br&gt; \")\n    step2(\"2. Prepare and analyse data &lt;br&gt; and generate outputs\")\n    step3(\"3. Prepare code and data &lt;br&gt; for sharing\")\n    step4(\"4. Share in public\")\n    \n    step1 --&gt; step2 --&gt; step3 --&gt; step4\nA reproducible workflow enables you to:\nThe guide and provided code snippets serve as a template for initiating new projects or creating reproducible versions of existing ones. The best way to learn is to download the notebooks, experiment with the examples in RStudio, and adapt them to your project and preferences. To follow along, ensure that you have R and RStudio installed and up to date."
  },
  {
    "objectID": "babysteps.html#create-a-rstudio-project",
    "href": "babysteps.html#create-a-rstudio-project",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "1.1 Create a RStudio project",
    "text": "1.1 Create a RStudio project\n\nIn RStudio, start fresh and select File - New Project - New Directory - Empty Project.\nCopy and run below code in RStudio console window to download this notebook to your project folder. (or download from here and save to project folder)\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/babysteps.qmd\", \"babysteps.qmd\")\nOpen the notebook in RStudio.\nRun the below code chunk to install required packages. Tip: place cursor inside the chunk and press Ctrl+Shift+Enter. The Here package simplifies file path management by making all paths relative to the project root.\n\n\n\nCode: Load packages\n## Load packages: knitr and here\n# Here  for file path management and Knitr for dynamic report generation\n# Check if packages are installed, and install if not\nif (!requireNamespace(\"knitr\", quietly = TRUE)) {install.packages(\"knitr\")}\nif (!requireNamespace(\"here\", quietly = TRUE)) {install.packages(\"here\")}\n# Load packages\nrequire(knitr)\nrequire(here)\n\n\n\n\nCode: Need help with the file?\n# If errors, you may set the working directory with this function (uncomment it)\n# Check your working directory\n# getwd()\n# Set your working directory\n# setwd(\"c:/your-path-to-project-folder/\")\n\n# Check the file is found\nif (file.exists(here(\"babysteps.qmd\"))) {\n  print(\"Babysteps file found!\")\n} else {\n  print(\"Note! Please check the babysteps.qmd file and your working directory.\")\n}\n\n\n[1] \"Babysteps file found!\""
  },
  {
    "objectID": "babysteps.html#create-the-project-folder-structure",
    "href": "babysteps.html#create-the-project-folder-structure",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "1.2 Create the project folder structure",
    "text": "1.2 Create the project folder structure\nThe code below will create a coherent folder structure for your project. You can modify the folder names for your own project as needed. Alternatively, you may create folders without code. Note these good practices when working with folders and files:\n\nNaming conventions for folders and files: only lowercase letters; no spaces but-dashes (or_underscores) instead. Prefix numbers with leading zeros ensure automatic sorting (01-data, 02-scripts…).\nRelative file paths. Always use relative folder paths for reproducibility. Relative means data/file.csv instead of absolute one: C:/Users/Documents…./file.csv\nHere -function (optional). Wrap the file path with the here function to ensure the path is always relative to the project root and works in all contexts, e.g., here(\"data/file.csv\"). Requires R package Here.\nSeparate folders for public sharing. For our reproducible example, we will only need the folders: data, scripts, and supplementary for public sharing.\n\nRun the code below to create your folders.\n\n# List folder names into a vector object, folders not used for tutorial are commented out\nfolders &lt;- c(\n  \"01-data\",\n    \"01-data/raw\", # Unmodified, original raw data\n    \"01-data/processed\", # Data after cleaning or transformations\n    \"01-data/metadata\", # Codebooks, dictionaries etc.\n#   \"01-data/methods\", # Ethics, protocols, licenses etc.\n  \"02-scripts\", # Scripts for public sharing\n  \"03-supplementary\", # Additional material for public sharing\n  \"04-notebooks\", # Notebooks for running analyses and writing notes\n  \"05-outputs\",\n    \"05-outputs/figures\", # Main graphs and visualizations\n    \"05-outputs/tables\", # Main result tables\n#   \"05-outputs/manuscripts\", # Drafts and final versions of papers\n#   \"05-outputs/presentations\", # Slides, posters, etc.\n  \"99-archive\" # Archived materials, old versions \n)    \n# Create folders (loop through the vector) \nfor (folder in folders) {dir.create(folder, recursive = TRUE, showWarnings = TRUE)}\n# Print message\nmessage(\"Project folders created successfully.\")\n\n\n\n\n\n\n\nNote\n\n\n\nWhy was the reproducibility advocate bad at hide and seek?  Because they always left a trail to reproduce their steps!"
  },
  {
    "objectID": "babysteps.html#prepare-your-data-in-a-reproducible-way",
    "href": "babysteps.html#prepare-your-data-in-a-reproducible-way",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "2.1 2.1: Prepare your data in a reproducible way",
    "text": "2.1 2.1: Prepare your data in a reproducible way\nFor reproducibility, it is vital to keep the raw data untouched and create code which includes all steps done for processing and preparing the data for analysis. All data cleaning done in R ensures the transparency of your research.\nA good open science practice is to simulate data when planning analysis or preregistering your study (Peikert et al., 2021). When possible, simulating data will help you plan your analysis before working with empirical data. Once the empirical data is available, you can replace the simulated data - and get the results quicker!\n\n```{mermaid}\nflowchart TB\n    step0(\"Simulate and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Paper or Presentation\")\n    step6(\"Text\")\n    \n    step1 --&gt; step2 --&gt; step3 --&gt; step4a\n    step3 --&gt; step4b\n    step4 --&gt; step5\n    step6 --&gt; step5\n```\n\n\n\n\nflowchart TB\n    step0(\"Simulate and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Paper or Presentation\")\n    step6(\"Text\")\n    \n    step1 --&gt; step2 --&gt; step3 --&gt; step4a\n    step3 --&gt; step4b\n    step4 --&gt; step5\n    step6 --&gt; step5\n\n\n\n\n\nFor this tutorial, we simulate some raw data and then process and analyse it. In our example, we are planning a study on baby steps :) We also create a sample codebook.\n\nRun the code below to download two notebooks. (if not downloaded already)\nNotebooks are:\n\n00-simulate-data: Simulating raw data and a codebook (for our example study)\n01-prepare-data: Reproducible steps for processing raw data.\n\n\nOpen the notebooks in order and run all code. You don’t need to understand all code to get the idea of the workflow.\n\n```{r}\n#| label: download-notebooks1\n# Download notebooks ---------------------------------------\n# Download create-data notebook \n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#              \"04-notebooks/00-simulate-data.qmd\")\n# Download prepare-data notebook\n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#             \"04-notebooks/01-prepare-data.qmd\")\n#\nmessage(\"Notebooks are saved in your Notebooks -folder. Open them and run!\")\n```\n\nNotebooks are saved in your Notebooks -folder. Open them and run!\n\n\nTip. You can create your own notebook by selecting: File - New File - R Notebook (in RStudio)."
  },
  {
    "objectID": "babysteps.html#create-reproducible-analyses-tables-and-figures",
    "href": "babysteps.html#create-reproducible-analyses-tables-and-figures",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "2.2 Create reproducible analyses, tables and figures",
    "text": "2.2 Create reproducible analyses, tables and figures\nThe next notebook shows how to create reproducible tables and figures in R. Also in APA style! This will avoid the need for copy-pasting values from R to a word processor, ensuring fewer errors and - better reproducibility! You can export the formatted table into Word, PowerPoint, HTML, or pdf.\n\nDownload the notebook by running the code below.\nOpen the notebook to follow and run the examples.\n\n\n# Download a notebook for creating tables\n# download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#              here(\"04-notebooks/02-create-tables-and-figures.qmd\"))\nmessage(\"Descript -notebooks downloaded and saved in your notebooks -folder. Open and try!\")\n\nDescript -notebooks downloaded and saved in your notebooks -folder. Open and try!\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhy did the scientist break up with reproducibility?\nBecause they wanted a relationship with fewer variables!"
  },
  {
    "objectID": "babysteps.html#prepare-your-data-for-sharing-if-possible",
    "href": "babysteps.html#prepare-your-data-for-sharing-if-possible",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "3.1 3.1 Prepare your data for sharing (if possible)",
    "text": "3.1 3.1 Prepare your data for sharing (if possible)\nFor full reproducibility, share your raw data when possible. Check these steps before sharing:\n\nConsent. Ensure you have consent from the study participants and your institution to share the data.\nFormat. Make sure your data is in open file format like .csv.\nDocumentation. Include necessary documentation in the metadata folder (e.g., codebooks, readme, licenses, ethics). Use open file formats. See example codebook in the notebook &lt;simulate-data&gt;.\nDe-identify. If needed, prepare a de-identified version of your raw data to manage the risk of identifying individuals in the dataset."
  },
  {
    "objectID": "babysteps.html#prepare-your-code-for-public-sharing",
    "href": "babysteps.html#prepare-your-code-for-public-sharing",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "3.1 Prepare your code for public sharing",
    "text": "3.1 Prepare your code for public sharing\n\nComment the code. Make sure the code you plan to share is properly commented. Good practice is to write the comments before you write the code. If you lack comments, you can use Chat GPT to assist and review your code (with caution, naturally). With the prompt below, you can keep adding your scripts one at a time. Replace your code with the commented version, and test the code. Example prompt:\n\n\nDearest AI, please revise and improve the comments in my R script to increase its clarity and convey its purpose, without changing the code itself. Identify any errors separately and alert me to potential reproducibility issues. I will submit sections of the code sequentially for your review.\n\n\nUse README files. For complicated scripts and analyses, you can add a README text file with extensive documentation.\nFor a style guide for coding in R, see: style.tidyverse.org. It includes best practices for e.g., naming objects, and tools for reviewing your code.\nDocument R version and packages used. Documenting ‘dependencies’ ensures that future researchers can replicate the exact computational environment in which your analysis was conducted. With the report package, you can create this as a supplementary file with the code below.\n\n\n# Create a supplementary file with R version and packages used\n# load report package\nif (!requireNamespace(\"report\", quietly = TRUE)) {install.packages(\"report\")}\nrequire(report)\n\n# Create dependencies report\ndependencies &lt;- report(sessionInfo())\n\n# Export report as a supplementary text file \nwriteLines(dependencies, here(\"03-supplementary/dependencies.txt\"))\n\n# print a summary of the report\nmessage(\"Dependencies summary saved in the 03-supplementary -folder. A brief summary:\")\nsummary(report(sessionInfo()))\n\nThe analysis was done using the R Statistical language (v4.2.2; R Core Team,\n2022) on Windows 10 x64, using the packages report (v0.5.8), here (v1.0.1) and\nknitr (v1.45).\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor automated computational reproducibility, you can use* renv *for dependency management or Docker for containerization.\n\n\n\n3.1.1 Extract code from notebooks - the PURL function\nAs you may have noticed from the example notebooks, we used notebooks also for personal notes and exploratory analyses. How can one manage all that in the same file? With help from the ‘purl’ function!\nThe “purl” function from the knitr package will extract all executable code from the notebooks and save them in in an .R script file - for public sharing. The trick is that it only extracts the code chunks with comments, not the notes (text outside code chunks) or results. In addition, the code chunks marked with purl=FALSE (in the title, see example below), will not be included in the .R script file created. Thus, you can keep draft analyses and personal notes in the same notebook with the code for public sharing.\n\nRun the code below to create .R script files from the notebooks.\nOpen an .R script file created to view the result.\n\n\n# Extract simulate-data: use purl to extract r-code from notebook into script file\npurl(\n    here(\"04-notebooks/00-simulate-data.qmd\"), # the source notebook \n    output=here(\"02-scripts/00-simulate-data.R\"), # the output script file\n    documentation = 1 # to include only the code chunks\n    )\n\n\n  |                                                           \n  |                                                     |   0%\n  |                                                           \n  |.........                                            |  17%                 \n  |                                                           \n  |..................                                   |  33% [setup-simulate]\n  |                                                           \n  |..........................                           |  50%                 \n  |                                                           \n  |...................................                  |  67% [codebook]      \n  |                                                           \n  |............................................         |  83%                 \n  |                                                           \n  |.....................................................| 100% [simulate-data] \n                                                                                                           \n\n\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/00-simulate-data.R\"\n\n# Extract prepare-data\npurl(\n    here(\"04-notebooks/01-prepare-data.qmd\"), \n    output=here(\"02-scripts/01-prepare-data.R\"), \n    documentation = 1 \n    )\n\n\n  |                                               \n  |                                         |   0%\n  |                                               \n  |..                                       |   4%                             \n  |                                               \n  |....                                     |   9% [setup_prepare]             \n  |                                               \n  |.....                                    |  13%                             \n  |                                               \n  |.......                                  |  17% [display_data_structure]    \n  |                                               \n  |.........                                |  22%                             \n  |                                               \n  |...........                              |  26% [modify-data-types]         \n  |                                               \n  |............                             |  30%                             \n  |                                               \n  |..............                           |  35% [Initial-EDA]               \n  |                                               \n  |................                         |  39%                             \n  |                                               \n  |..................                       |  43% [Missing-values]            \n  |                                               \n  |....................                     |  48%                             \n  |                                               \n  |.....................                    |  52% [Correcting Errors]         \n  |                                               \n  |.......................                  |  57%                             \n  |                                               \n  |.........................                |  61% [Handling Outliers]         \n  |                                               \n  |...........................              |  65%                             \n  |                                               \n  |.............................            |  70% [Standardize Variable Names]\n  |                                               \n  |..............................           |  74%                             \n  |                                               \n  |................................         |  78% [Recoding variables]        \n  |                                               \n  |..................................       |  83%                             \n  |                                               \n  |....................................     |  87% [EDA-with-processed-data]   \n  |                                               \n  |.....................................    |  91%                             \n  |                                               \n  |.......................................  |  96% [Save dataset]              \n  |                                               \n  |.........................................| 100%                             \n                                                                                                                       \n\n\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/01-prepare-data.R\"\n\n# Extract create-tables-and-figures\npurl(here(\"04-notebooks/02-create-tables-and-figures.qmd\"), \n     output=here(\"02-scripts/02-create-tables-and-figures.R\"),\n     documentation = 1)\n\n\n  |                                         \n  |                                   |   0%\n  |                                         \n  |.                                  |   4%                                   \n  |                                         \n  |...                                |   7% [load-processed-data-and-packages]\n  |                                         \n  |....                               |  11%                                   \n  |                                         \n  |.....                              |  15% [skim-summary]                    \n  |                                         \n  |......                             |  19%                                   \n  |                                         \n  |........                           |  22% [tbl-summary]                     \n  |                                         \n  |.........                          |  26%                                   \n  |                                         \n  |..........                         |  30% [tbl-preview-summary]             \n  |                                         \n  |............                       |  33%                                   \n  |                                         \n  |.............                      |  37% [export-outputs]                  \n  |                                         \n  |..............                     |  41%                                   \n  |                                         \n  |................                   |  44% [tbl-linear-regression]           \n  |                                         \n  |.................                  |  48%                                   \n  |                                         \n  |..................                 |  52% [preview-tbl-linear-regression]   \n  |                                         \n  |...................                |  56%                                   \n  |                                         \n  |.....................              |  59% [tbl-mixed-effects]               \n  |                                         \n  |......................             |  63%                                   \n  |                                         \n  |.......................            |  67% [fig-coefs]                       \n  |                                         \n  |.........................          |  70%                                   \n  |                                         \n  |..........................         |  74% [fig1-preview]                    \n  |                                         \n  |...........................        |  78%                                   \n  |                                         \n  |.............................      |  81% [report-results-lm]               \n  |                                         \n  |..............................     |  85%                                   \n  |                                         \n  |...............................    |  89% [report-results-mixed]            \n  |                                         \n  |................................   |  93%                                   \n  |                                         \n  |.................................. |  96% [fig-interaction]                 \n  |                                         \n  |...................................| 100%                                   \n                                                                                                                             \n\n\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/02-create-tables-and-figures.R\""
  },
  {
    "objectID": "babysteps.html#run-the-analyses-from-r-script-files",
    "href": "babysteps.html#run-the-analyses-from-r-script-files",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "3.2 Run the analyses from R script files",
    "text": "3.2 Run the analyses from R script files\nAfter the R script files are created, it is good to test the scripts before sharing. You can use the following code chunk to re-run your analyses without opening the R script files. It is good practice to empty the R environment before running the analyses.\n\nRestart R Session in RStudio: Select Session &gt; Restart R\nRun the below code chunk.\n\n\n# Run analyses from R -----------------------------------------\n\n# Clears all objects from memory to ensure reproducibility\nrm(list = ls())\n\n\n# 0 Simulate data\nsource(here(\"02-scripts/00-simulate-data.R\"))\n\n# 1 Prepare data\nsource(here(\"02-scripts/01-prepare-data.R\"))\n\n# 2 Run analyses to create tables\nsource(here(\"02-scripts/02-create-tables-and-figures.R\"))\n\nTip: You can run one row at a time by placing your cursor in the row and pressing Ctrl+Enter.\nTip: Starting each code chunk with “title-for-chunk ————————————” will break up your script file into easily readable chunks.\nNote. the Purl function is not perfect. It may not work with all types of code, and you may need to do some manual editing. For example, it may not work with some types of loops or functions. It is also good to check the script file for any errors or missing parts."
  },
  {
    "objectID": "babysteps.html#share-your-notebook-with-co-authors",
    "href": "babysteps.html#share-your-notebook-with-co-authors",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "3.3 Share your notebook with co-authors",
    "text": "3.3 Share your notebook with co-authors\nBest way to share some analyses with your colleagues? Notebooks are great for that. They can be read in any browser and can include code and your notes and questions for your colleagues. Although maybe intimidating to show others your code, it’s an important step in making your research reproducible. With this example, we render/knit one notebook into html format for sharing,\n\nOpen one of the notebooks, for example 01-prepare-data.qmd\nSelect Render. RStudio will render the notebook into a .html file, which you can easily share. You can change the output format with inserting the following in the very top of the notebook “format: html” and changing the html to pdf, docx, or other format."
  },
  {
    "objectID": "04-notebooks/resources.html",
    "href": "04-notebooks/resources.html",
    "title": "Resources for Reproducibility",
    "section": "",
    "text": "In the fascinating world of reproducibility, there is always more. Issues like dependency management, version control, licencing, and writing a full manuscript in RStudio are not (yet) covered in my tutorials. See below some selected resources."
  },
  {
    "objectID": "04-notebooks/resources.html#guides-and-tutorials-on-reproducibility",
    "href": "04-notebooks/resources.html#guides-and-tutorials-on-reproducibility",
    "title": "Resources for Reproducibility",
    "section": "1 Guides and tutorials on reproducibility",
    "text": "1 Guides and tutorials on reproducibility\n\nFORRT - Framework for Open and Reproducible Research (link)\nAEA Data Editor Guidance and tools (link)\nOpen Science Training Handbook (link)\nHarrell F E: R Workflow for Reproducible Data Analysis and Reporting (link)\nPeikert, Aaron, & Diemerling, Hannes. (2023). Reproducible Research in R: A Workshop on How to Do the Same Thing More Than Once. Zenodo. https://doi.org/10.5281/zenodo.8069391\nPeikert, A., van Lissa, C. J., & Brandmaier, A. M. (2021). Reproducible Research in R: A Tutorial on How to Do the Same Thing More Than Once. Psych, 3(4), Article 4. https://doi.org/10.3390/psych3040053"
  },
  {
    "objectID": "04-notebooks/resources.html#reproducibility-checklists",
    "href": "04-notebooks/resources.html#reproducibility-checklists",
    "title": "Resources for Reproducibility",
    "section": "2 Reproducibility checklists",
    "text": "2 Reproducibility checklists\n\nData and Code Availability Standard by AEA Social Science Data Editors: https://datacodestandard.org/\nReproducibility checklist by Meta-Psychology journal\nJournal of Applied Psychology methods checklist 2022 (pdf link)\nWicherts, J. M., Veldkamp, C. L., Augusteijn, H. E., Bakker, M., Van Aert, R., & Van Assen, M. A. (2016). Degrees of freedom in planning, running, analyzing, and reporting psychological studies: A checklist to avoid p-hacking. Frontiers in psychology, 7, 222767. https://doi.org/10.3389/fpsyg.2016.01832\nLombaers, P., Bruin, J. de, & Schoot, R. van de. (2024). Reproducibility and Data storage Checklist for Active Learning-Aided Systematic Reviews. https://doi.org/10.31234/osf.io/g93zf"
  },
  {
    "objectID": "04-notebooks/resources.html#r-packages-for-reproducibility",
    "href": "04-notebooks/resources.html#r-packages-for-reproducibility",
    "title": "Resources for Reproducibility",
    "section": "3 R packages for reproducibility",
    "text": "3 R packages for reproducibility"
  },
  {
    "objectID": "04-notebooks/resources.html#other-references",
    "href": "04-notebooks/resources.html#other-references",
    "title": "Resources for Reproducibility",
    "section": "4 Other References",
    "text": "4 Other References"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html",
    "href": "04-notebooks/02-create-tables-and-figures.html",
    "title": "Generating Reproducible Tables and Figures",
    "section": "",
    "text": "This notebook shows how to create reproducible tables in R, ready to be used in a publication or presentation. With this, you will avoid the need for copy-pasting values from R to word processor, avoiding errors and most importantly, ensuring better reproducibility.\nThis tutorial is part of “Baby Steps for Reproducible Workflow in R”. If you have not followed the full tutorial, the first code chunk downloads the example dataset."
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#example-data-and-study-hypotheses",
    "href": "04-notebooks/02-create-tables-and-figures.html#example-data-and-study-hypotheses",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.1 Example data and study hypotheses",
    "text": "0.1 Example data and study hypotheses\nThe dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data is simulated for planning a (fictional) study.\nSuppose we want to study the following hypotheses:\nH1: Learning Curve: Over time, all babies will show a decrease in PuzzleTime, reflecting the learning curve in puzzle-solving abilities, with walkers showing the steepest decline due to potentially advanced motor and cognitive integration.\nH2: Enjoyment and Engagement: GiggleCount decreases less over time for crawlers and toddlers than for walkers, suggesting that while they may solve puzzles more slowly, they maintain a higher level of enjoyment and engagement throughout the learning process.\nTables to be created:\n\nTable 1. Descriptive statistics\nTable 2. Linear Regression results\nTable 3. Mixed-effects model results"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#load-required-packages-and-processed-data",
    "href": "04-notebooks/02-create-tables-and-figures.html#load-required-packages-and-processed-data",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.2 Load required packages and processed data",
    "text": "0.2 Load required packages and processed data\n\n# install required packages if not already\n# tidyverse for data manipulation\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {install.packages(\"tidyverse\")}\n# modelsummary package\nif (!requireNamespace(\"modelsummary\", quietly = TRUE)) {install.packages(\"modelsummary\")}\n# flextable package\nif (!requireNamespace(\"flextable\", quietly = TRUE)) {install.packages(\"flextable\")}\n# Load the lme4 package for regression\nif (!requireNamespace(\"lme4\", quietly = TRUE)) {install.packages(\"lme4\")}\n# broom to create tidy tables\nif (!requireNamespace(\"broom\", quietly = TRUE)) {install.packages(\"broom\")}\n# Load the report to report the results \nif (!requireNamespace(\"report\", quietly = TRUE)) {install.packages(\"report\")}\n\n# load packages\nrequire(tidyverse)\nrequire(here)\nrequire(modelsummary)\nrequire(flextable)\nrequire(lme4)\nrequire(report)\nrequire(broom)\n\n# Download data IF NOT already available\nif (!file.exists(here(\"01-data/processed/babysteps.csv\"))) {\n  download.file(\"https://raw.githubusercontent.com/juusorepo/baby-steps-reproducible-workflow-r/main/01-data/raw/babysteps-rawdata.csv\", \"babysteps.csv\")\n}\n# load the data\nbabysteps &lt;- read.csv(here(\"01-data/processed/babysteps.csv\"))\n# Converting character variables to factors \nbabysteps &lt;- babysteps %&gt;% mutate_if(is.character, as.factor)\n# Subset data for the baseline measurement (T1)\nbabysteps_T1 &lt;- babysteps %&gt;% filter(wave == 1)\n# rename columns for better readability for outputs\nbabysteps_T1 &lt;- babysteps_T1 %&gt;%\n  rename(\n    `Age (months)` = agemonths,\n    `Puzzletime (sec)` = puzzletime,\n    `Giggle count` = gigglecount,\n    `Sleep (hours)` = sleephours\n  )"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#create-a-descriptives-table-with-datasummary",
    "href": "04-notebooks/02-create-tables-and-figures.html#create-a-descriptives-table-with-datasummary",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.3 Create a descriptives table with datasummary",
    "text": "0.3 Create a descriptives table with datasummary\nTo create well-formatted summary table, we are using the modelsummary R package. Modelsummary provides a variety of tables and plots to summarize statistical models and data in R. For tutorials and documentation, see: https://modelsummary.com/\n\nFirst, we will use the skim_summary function to get a quick overview of the data.\nSetting “purl: false” will exclude this exploratory code chunk from the script file generated for sharing\n\n\n# Print the datasummary_skim of the numeric variables\nbabysteps_T1 %&gt;%\n  select(-wave, -babyid) %&gt;%\n  datasummary_skim(type = \"numeric\")\n\n\n\n\n\nUnique\nMissing Pct.\nMean\nSD\nMin\nMedian\nMax\n\n\n\n\n\nAge (months)\n3\n0\n13.0\n0.8\n12.0\n13.0\n14.0\n\n\n\nSleep (hours)\n7\n0\n13.0\n1.9\n10.0\n13.0\n16.0\n\n\n\nPuzzletime (sec)\n94\n0\n56.7\n28.1\n1.6\n56.9\n114.4\n\n\n\nGiggle count\n38\n0\n22.8\n10.8\n1.0\n23.5\n48.0\n\n\n\n\n\n\n\n\nNext, we will build a customized summary table using datasummary and flextable.\n\n# First we set flextable defaults to follow APA style,\n# so all our tables will have the same default style \nset_flextable_defaults(\n  font.size = 10, \n  font.family = \"Times New Roman\",\n  font.color = \"#000000\",\n#  table.layout = \"fixed\",\n  border.color = \"grey\",\n  background.color = \"white\",\n  padding.top = 4, padding.bottom = 4,\n  padding.left = 4, padding.right = 4,\n  height = 1.3, # line height\n  digits = 2,\n  decimal.mark = \".\",\n  big.mark = \",\", # thousands separator\n  na_str = \"NA\"\n)\n\n# The datasummary function builds a table by reference to a two-sided formula:\n# the left side defines rows and the right side defines columns.\ntbl &lt;- datasummary(\n  `Age (months)` + `Puzzletime (sec)` + `Giggle count` + `Sleep (hours)` ~ # left side: rows\n  N + steptype * (Mean + SD), # right side: columns, and * for grouping\n  output = \"flextable\",\n  data = babysteps_T1\n)\n\n# Modifying the table, learn more: https://ardata-fr.github.io/flextable-book/\n# add a spanning header row\ntbl &lt;- add_header_row(tbl,\n  colwidths = c(2, 2, 2, 2),\n  values = c(\"\", \"Crawling\", \"Toddling\", \"Walking\")\n  )\n# center align the header row\ntbl &lt;- align(tbl, i = 1, part = \"header\", align = \"center\")\ntbl &lt;- add_footer_lines(tbl, \"Add notes here.\")\n\n# add a caption\n# tbl &lt;- set_caption(tbl, caption = \"title-here\")\n\n# set width of the first column\ntbl&lt;- width(tbl, j = 1, width = 1.5)\n# or autofit columns widths\n# tbl &lt;- autofit(tbl)\n\n# adjust the column labels\ntbl &lt;- set_header_labels(\n  tbl,\n  \"Crawling / Mean\" = \"Mean\",\n  \"Crawling / SD\" = \"SD\",\n  \"Toddling / Mean\" = \"Mean\",\n  \"Toddling / SD\" = \"SD\",\n  \"Walking / Mean\" = \"Mean\",\n  \"Walking / SD\" = \"SD\"\n)\n\n\n?(caption)\n\n\n\n\n# Print a preview of the table \nprint(tbl, preview = \"html\") # preview format can be changed to: docx, rft, pptx, pdf\n\n\n?(caption)\n\n\n\na flextable object.\ncol_keys: ` `, `N`, `Crawling / Mean`, `Crawling / SD`, `Toddling / Mean`, `Toddling / SD`, `Walking / Mean`, `Walking / SD` \nheader has 2 row(s) \nbody has 4 row(s) \noriginal dataset sample: \n                     N Crawling / Mean Crawling / SD Toddling / Mean\n1     Age (months) 100           13.03          0.81           13.06\n2 Puzzletime (sec) 100           70.77         25.95           49.59\n3     Giggle count 100           29.79          8.96           20.06\n4    Sleep (hours) 100           13.12          2.03           13.69\n  Toddling / SD Walking / Mean Walking / SD\n1          0.88          12.97         0.71\n2         29.09          49.83        24.76\n3         10.19          18.71         9.98\n4          1.64          12.14         1.82"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#export-table-1-to-different-formats",
    "href": "04-notebooks/02-create-tables-and-figures.html#export-table-1-to-different-formats",
    "title": "Generating Reproducible Tables and Figures",
    "section": "3.1 Export Table 1 to different formats",
    "text": "3.1 Export Table 1 to different formats\nContinuing with the flextable package, we can export the table created to Word, PowerPoint, HTML, image (PNG), or PDF. The code below will save different formats to the outputs/tables folder. The outputs can then be included in the paper / presentation.\n\n# To RTF (opens in e.g., Microsoft Word)\nsave_as_rtf(\n  \"Descriptive statistics for baseline data\" = tbl,\n  path = here(\"05-outputs/tables/tbl1-desc.rtf\")\n)\n\n# To PowerPoint\nsave_as_pptx(\n  \"Descriptive statistics for baseline data\" = tbl,\n  path = here(\"05-outputs/tables/tbl1-desc.pptx\")\n)\n\n# To HTML\nsave_as_html(tbl, path = here(\"05-outputs/tables/tbl1-desc.html\"))\n\n# To image file\nsave_as_image(tbl, path = here(\"05-outputs/tables/tbl1-desc.png\"))\n\n# If problems in creating image, install webshot package\n# if (!requireNamespace(\"webshot\", quietly = TRUE)) {install.packages(\"webshot\")}\n# require(webshot)"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#table-2.-linear-regression-results-table-with-broom-and-flextable",
    "href": "04-notebooks/02-create-tables-and-figures.html#table-2.-linear-regression-results-table-with-broom-and-flextable",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.5 Table 2. Linear regression results table with Broom and Flextable",
    "text": "0.5 Table 2. Linear regression results table with Broom and Flextable\nA bit simpler example - the tidy() function from broom package enables us to make a tidy table from model results.\n\n# Run a linear regression model\nmodel_lm &lt;- lm(puzzletime ~ agemonths + sleephours, data = babysteps)\n\n# Create a tidy table from the model results\ntbl_lm &lt;- model_lm %&gt;%\n  tidy(conf.int = TRUE) %&gt;% # include confidence intervals\n  mutate_if(is.numeric, round, 3) # round numerics to three decimals\n\n# Convert to flextable for customization and export  \ntbl_lm &lt;- flextable(tbl_lm)\n\n# Customize using flextable \ntbl_lm &lt;- tbl_lm %&gt;%\n#  set_caption(\"Linear Regression Results\") %&gt;%\n  set_header_labels(term = \"Predictor\", estimate = \"Estimate\", std.error = \"Std. Error\", \n                    statistic = \"Statistic\", p.value = \"P value\", conf.low = \"CI Lower\", conf.high = \"CI Upper\") %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;%\n  align(align = \"left\", part = \"header\")\n\n# Export the table to Word\nsave_as_rtf(\n  \"Linear regression results\" = tbl_lm, \n  path = here(\"05-outputs/tables/tbl2-lm.rtf\"))\n\n\n?(caption)\n\n\n\nThe table is saved in the 05-outputs/tables folder. You can preview your export with the following:\n\n# Preview table, the format can be changed to: docx, rft, pptx, pdf\nprint(tbl, preview = \"html\") \n\na flextable object.\ncol_keys: ` `, `N`, `Crawling / Mean`, `Crawling / SD`, `Toddling / Mean`, `Toddling / SD`, `Walking / Mean`, `Walking / SD` \nheader has 2 row(s) \nbody has 4 row(s) \noriginal dataset sample: \n                     N Crawling / Mean Crawling / SD Toddling / Mean\n1     Age (months) 100           13.03          0.81           13.06\n2 Puzzletime (sec) 100           70.77         25.95           49.59\n3     Giggle count 100           29.79          8.96           20.06\n4    Sleep (hours) 100           13.12          2.03           13.69\n  Toddling / SD Walking / Mean Walking / SD\n1          0.88          12.97         0.71\n2         29.09          49.83        24.76\n3         10.19          18.71         9.98\n4          1.64          12.14         1.82"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#table-3.-mixed-effects-model-results",
    "href": "04-notebooks/02-create-tables-and-figures.html#table-3.-mixed-effects-model-results",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.6 Table 3. Mixed effects model results",
    "text": "0.6 Table 3. Mixed effects model results\nWe run three models and presents the results in a single table. We create an APA style table for the paper and a more colorful version for presentation.\n\n# Model 1: Basic Effect of Age\nmodel1 &lt;- lm(puzzletime ~ agemonths, data = babysteps)\n\n# Model 2: Age and Mobility Type\nmodel2 &lt;- lm(puzzletime ~ agemonths + steptype, data = babysteps)\n\n# Model 3: Age, Mobility Type, and Sleep Quality\nmodel3 &lt;- lm(puzzletime ~ agemonths + steptype + sleephours, data = babysteps)\n\n# Add models into a list\nmodels &lt;- list(\"M1\" = model1,\"M2\" = model2, \"M3\" = model3)\n\n# Create a table with modelsummary\n# Specify table title and footnote\ntitle = \"\" \nnotes = \"Insert notes here.\"     \n\n# Rename and/or reorder coefficients for the table\ncoef_map &lt;- c(\n        \"agemonths\" = \"Age in months\",  \n        \"steptypeToddling\" = \"Step type: Toddling\",   \n        \"steptypeWalking\" = \"Step type: Walking\",\n        \"sleephours\" = \"Sleeptime in hours\",\n        \"(Intercept)\" = \"Intercept\")\n\n# Create the table \ntbl &lt;- modelsummary(models,               # display the table\n             output = 'flextable',        # output as flextable\n             stars = TRUE,                # include stars for significance\n             gof_map = c(\"nobs\", \"r.squared\"),         # goodness of fit stats to include   \n             coef_map = coef_map,         # coefficient mapping\n             title = title,             # title\n             notes = notes)           # source note\n\n# Autofit cell widths and height\ntbl &lt;- autofit(tbl) # Adjust column widths\n\n# Export the table to RTF (e.g., Word)\nsave_as_rtf(\n  \"Table 3. Mixed effects model results\" = tbl, \n  path = here(\"05-outputs/tables/tbl3-mixed-effects.rtf\"))\n\n# Create a styled version for presentation\ntbl_for_ppt &lt;- tbl %&gt;%\n    bg(c(3,5), bg = 'lightblue') %&gt;% # background color in row 1\n    color(7, color = 'red') %&gt;% # text color in row 7\n  fontsize(size = 10, part = \"all\") %&gt;% # Font size for all parts of the table\n  theme_vanilla() # flextable offers several predefined themes \n  \n# Export the presentation version to Powerpoint\nsave_as_pptx(\n  \"Mixed effects model results\" = tbl_for_ppt, \n  path = here(\"05-outputs/tables/tbl3-mixed-effects.pptx\"))\n\n\n?(caption)"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#creating-a-coefficient-plot",
    "href": "04-notebooks/02-create-tables-and-figures.html#creating-a-coefficient-plot",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.7 Creating a coefficient plot",
    "text": "0.7 Creating a coefficient plot\nUsing the full mixed-effects model, we generate a coefficient plot that shows point estimates and confidence intervals. Modelplot accepts the same kinds of objects and arguments as the modelsummary function, and we can also customize the plot like any other ggplot object.\n\n# Create a coefficient plot \nfig1 &lt;- modelplot(model3, \n          coef_map = rev(coef_map), # rev() reverses list order\n          coef_omit = \"Intercept\", # omit Intercept \n          color = \"blue\") + \n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = .75) + # red 0 line\n  theme(panel.background = element_rect(fill = \"white\"), # Set plot panel background to white\n        plot.background = element_rect(fill = \"white\", color = NA)) + # Set the plot background to white, remove border\n  labs(\n    title = \"Figure 1: Predictors of Puzzle Solving Time\",\n    caption = \"Insert notes here.\"\n  )\n\nfig1 &lt;- modelplot(model3, \n          coef_map = rev(coef_map), # rev() reverses list order\n          coef_omit = \"Intercept\", # omit Intercept \n          color = \"blue\") + \n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", linewidth = .75) + # red 0 line\n  theme(panel.background = element_rect(fill = \"white\"), # Ensure background is white\n        plot.background = element_rect(fill = \"white\", color = NA), # No border\n        text = element_text(family = \"sans-serif\", color = \"black\"), # sans-serif fonts like Arial\n        plot.title = element_text(size = 12, face = \"bold\"), # Title in bold\n        plot.caption = element_text(size = 10), # Smaller text for caption\n        axis.title = element_text(size = 12), # Axis titles\n        axis.text = element_text(size = 10), # Axis text\n        legend.title = element_text(size = 12), # Legend title\n        legend.text = element_text(size = 10) # Legend text\n        ) + \n  labs(\n    title = \"Figure 1: Predictors of Puzzle Solving Time\",\n    caption = \"Insert notes here.\"\n  )\n\n# Export fig1 to a PNG file\nggsave(here(\"05-outputs/figures/fig1-coefs.png\"), fig1, width = 8, height = 6, dpi = 300)\n\nmessage(\"Figure was saved in figures folder.\")\n\nFigure was saved in figures folder.\n\n\nPreview the coefficient plot\n\nfig1"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#alternative-the-report-package-for-automatic-reports",
    "href": "04-notebooks/02-create-tables-and-figures.html#alternative-the-report-package-for-automatic-reports",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.8 ALTERNATIVE: The report package for automatic reports",
    "text": "0.8 ALTERNATIVE: The report package for automatic reports\nThe report package produces automatic reports of models and tests, following best practices guidelines (APA). The report() function creates a textual narrative of the results and report_table creates - a results table. A short tutorial video\nFor the demo, we will use the linear model (model_lm) and the mixed-effects model (model3) we created earlier.\n\n\n\n\n\n\n\n\n\n\n\n\n\n```{r}\n# Assuming 'data' contains the interaction term effect\nggplot(babysteps, aes(x = agemonths, y = puzzletime, color = steptype)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", aes(group = steptype), se = FALSE) +\n  theme_minimal() +\n  labs(title = \"Interaction of Age and Step Type on Puzzle Time\",\n       x = \"Age in Months\",\n       y = \"Puzzle Time (minutes)\") +\n  scale_color_brewer(palette = \"Set1\")\n```\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n```{r}\n# Generate a data frame for predictions\npredict_data &lt;- expand.grid(agemonths = seq(min(babysteps$agemonths), max(babysteps$agemonths), length.out = 100),\n                            steptype = unique(babysteps$steptype),\n                            babyid = unique(babysteps$babyid)[1])  # Use a representative babyid\n\n# Predict puzzletime using the model\npredict_data$puzzletime_pred &lt;- predict(model2, newdata = predict_data, re.form = NA)  # Fixed effects only\n\n\n# Plotting observed data points\nggplot(babysteps, aes(x = agemonths, y = puzzletime, color = steptype)) +\n#  geom_point(alpha = 0.5) +\n  # Add predicted lines from the model\n  geom_line(data = predict_data, aes(x = agemonths, y = puzzletime_pred, color = steptype), linewidth = 1) +\n  # Add a smooth line through the observed data for comparison\n  theme_minimal() +\n  labs(title = \"Interaction of Age and Step Type on Puzzle Time\",\n       x = \"Age in Months\",\n       y = \"Puzzle Time (minutes)\") +\n  scale_color_brewer(palette = \"Set1\")\n```"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html",
    "href": "01-data/metadata/codebook-babysteps.html",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Title: Longitudinal Study on Baby Steps and Developmental Progress\nDescription: The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\nAuthor: Jane Doe\nCreation Date: March 11, 2024\nLast Updated: March 12, 2024\nVersion: 1.0\n\n\n\nAuthor Contact: Jane Doe (email)\nInstitution: University of Data Science\n\n\n\nThis dataset is made available under the Creative Commons Attribution 4.0 International License (CC BY 4.0). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made.\n\n\n\nPlease cite this dataset as:\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]\n\n\n\n\nBabyID\n\nDescription: Unique identifier for each baby participant.\nType: Integer\nExample Values: 1, 2, 3, …, 100\n\nStepType\n\nDescription: The type of mobility the baby is primarily using at the time of observation.\nType: Categorical\nPossible Values: Crawling, Toddling, Walking\n\nAgeMonths\n\nDescription: Age of the baby at the time of observation, in months.\nType: Integer\nRange: 12-24 months\n\nObservationPoint\n\nDescription: The stage of observation in the longitudinal study.\nType: Categorical\nPossible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n\nPuzzleTime\n\nDescription: Time it takes for the baby to solve a simple puzzle, measured in seconds.\nType: Numeric\nExample Values: Values can range based on puzzle difficulty and baby’s skill level.\n\nGiggleCount\n\nDescription: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\nType: Integer\nExample Values: Non-negative values, varying by individual and task.\n\n\n\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations.\n\n\n\n\nThis dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities.\n\n\n\nThis study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345.\n\n\n\nWe thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#dataset-overview",
    "href": "01-data/metadata/codebook-babysteps.html#dataset-overview",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Title: Longitudinal Study on Baby Steps and Developmental Progress\nDescription: The dataset follows 100 baby participants across three observation points to monitor how their mobility type (Crawling, Toddling, Walking) affects their ability to solve puzzles and their engagement with the task, as indicated by their giggle counts. The data has three three observation points for each baby. The data is simulated for planning a (fictional) study.\nAuthor: Jane Doe\nCreation Date: March 11, 2024\nLast Updated: March 12, 2024\nVersion: 1.0"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#contact-information",
    "href": "01-data/metadata/codebook-babysteps.html#contact-information",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Author Contact: Jane Doe (email)\nInstitution: University of Data Science"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#license",
    "href": "01-data/metadata/codebook-babysteps.html#license",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This dataset is made available under the Creative Commons Attribution 4.0 International License (CC BY 4.0). Users are free to share and adapt the material for any purpose, even commercially, under the following terms: appropriate credit must be given, a link to the license provided, and indication if changes were made."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#citation",
    "href": "01-data/metadata/codebook-babysteps.html#citation",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "Please cite this dataset as:\nDoe, J. (2024). Longitudinal Study on Baby Steps and Developmental Progress. University of Data Science. Version 1.0. [DOI or URL]"
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#variables",
    "href": "01-data/metadata/codebook-babysteps.html#variables",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "BabyID\n\nDescription: Unique identifier for each baby participant.\nType: Integer\nExample Values: 1, 2, 3, …, 100\n\nStepType\n\nDescription: The type of mobility the baby is primarily using at the time of observation.\nType: Categorical\nPossible Values: Crawling, Toddling, Walking\n\nAgeMonths\n\nDescription: Age of the baby at the time of observation, in months.\nType: Integer\nRange: 12-24 months\n\nObservationPoint\n\nDescription: The stage of observation in the longitudinal study.\nType: Categorical\nPossible Values: Start (12-14 months), Midway (15-20 months), End (21-24 months)\n\nPuzzleTime\n\nDescription: Time it takes for the baby to solve a simple puzzle, measured in seconds.\nType: Numeric\nExample Values: Values can range based on puzzle difficulty and baby’s skill level.\n\nGiggleCount\n\nDescription: Number of times the baby giggles while solving the puzzle. Used as a proxy for enjoyment or engagement.\nType: Integer\nExample Values: Non-negative values, varying by individual and task.\n\n\n\n\nData were collected through direct observation of baby participants in a controlled environment, ensuring that puzzle difficulty was consistent across observations."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#use-cases",
    "href": "01-data/metadata/codebook-babysteps.html#use-cases",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This dataset is intended for research on early childhood development, specifically examining the relationship between motor skills, problem-solving abilities, and engagement in activities."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#ethics-approval",
    "href": "01-data/metadata/codebook-babysteps.html#ethics-approval",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "This study received ethics approval from the Institutional Review Board at the University of Data Science, approval number #12345."
  },
  {
    "objectID": "01-data/metadata/codebook-babysteps.html#acknowledgements",
    "href": "01-data/metadata/codebook-babysteps.html#acknowledgements",
    "title": "1 Codebook for Longitudinal Baby Steps Dataset",
    "section": "",
    "text": "We thank the participants and their families for their time and contribution to this study. This research was supported by the Early Development Research Grant #67890."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html",
    "href": "04-notebooks/01-prepare-data.html",
    "title": "Prepare data",
    "section": "",
    "text": "This notebook sets an example workflow and template for preparing raw data for analysis. The focus is on cleaning, coding, and transforming the data, which are crucial steps to ensure the reliability and validity of the analysis. All processing steps should be documented, including the determination of the final sample size, any data exclusions, manipulations, and the creation of variables for the study.\nEDA (Exploratory Data Analysis) is integrated into the process to understand the distribution of the data and identify any apparent issues that need addressing. After processing, the processed data is saved in CSV format. This approach keeps the raw data untouched and makes all processing steps transparent and reproducible.\nWhy prepare data in a notebook instead of a script file?\n\nWorking in a notebook, rather than a script file, allows for the inclusion of exploratory data analysis and personal notes while processing data to ensure accurate processing. With the “purl” function, explained in the babysteps tutorial, only the code chunks will be extracted and saved in a script file for public sharing. The full notebook is intended for personal and collegial use. Feel free to modify the notebook for your style and purposes.\n\n\n\nOverview: Start by loading required R packages and your dataset into your analysis environment. For the tutorial, we load the raw data created in the Simulate-data notebook.\n\n```{r}\n#| label: setup_prepare\n# Title: Prepare data\n\n\n# Load required packages\nrequire(here)\n```\n\nLoading required package: here\n\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo\n\n```{r}\n#| label: setup_prepare\nrequire(tidyverse)\n```\n\nLoading required package: tidyverse\n\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n```{r}\n#| label: setup_prepare\n# load the raw data\ndataset &lt;- read.csv(here(\"01-data/raw/babysteps-rawdata.csv\"))\n```\n\n\n\n\nBefore diving into EDA, it’s crucial to ensure that each variable in your dataset is stored in the most appropriate data type. Correct data types can improve computational efficiency and are essential for appropriate analysis techniques.\n\nAction Steps: Start by listing the current data types of variables in your dataset. This helps identify any variables that may be incorrectly typed, such as numeric variables recognized as character data due to formatting issues.\n\n\n```{r}\n# Display the current data types of all variables in the dataset\nstr(dataset)\n```\n\n'data.frame':   300 obs. of  8 variables:\n $ BabyID     : int  1 2 3 4 5 6 7 8 9 10 ...\n $ StepType   : chr  \"Walking\" \"Walking\" \"Walking\" \"Toddling\" ...\n $ AgeMonths  : int  14 13 13 14 12 12 14 13 13 13 ...\n $ Wave       : chr  \"T1\" \"T1\" \"T1\" \"T1\" ...\n $ SleepHours : int  13 11 10 13 10 13 14 13 11 11 ...\n $ FeedingType: chr  \"Breastfed\" \"Formula\" \"Breastfed\" \"Formula\" ...\n $ PuzzleTime : num  49.1 43.3 28.6 47.3 71.8 62.4 67.6 77.6 53.8 59.9 ...\n $ GiggleCount: int  24 20 9 24 30 25 21 34 16 32 ...\n\n\n\nConvert Data Types: Based on the initial inspection, convert variables to their correct data types. Common conversions include transforming character variables that represent categories into factors and ensuring numeric variables are not mistakenly treated as character or factor types.\n\n\n```{r}\n# Example code to modify data types\n# Adjust the following commands according to the specific needs of your dataset.\n\n# Converting character variables to factors (for categorical variables with a limited number of categories)\ndataset &lt;- dataset %&gt;% mutate_if(is.character, as.factor)\n\n# Converting factors to character (if necessary for string processing)\n# dataset &lt;- dataset %&gt;% mutate_if(is.factor, as.character)\n\n# Converting integers to numeric\n# dataset &lt;- dataset %&gt;% mutate_if(is.integer, as.numeric)\n\n# Recheck data types\nstr(dataset)\n```\n\n'data.frame':   300 obs. of  8 variables:\n $ BabyID     : int  1 2 3 4 5 6 7 8 9 10 ...\n $ StepType   : Factor w/ 3 levels \"Crawling\",\"Toddling\",..: 3 3 3 2 3 2 2 2 3 1 ...\n $ AgeMonths  : int  14 13 13 14 12 12 14 13 13 13 ...\n $ Wave       : Factor w/ 3 levels \"T1\",\"T2\",\"T3\": 1 1 1 1 1 1 1 1 1 1 ...\n $ SleepHours : int  13 11 10 13 10 13 14 13 11 11 ...\n $ FeedingType: Factor w/ 2 levels \"Breastfed\",\"Formula\": 1 2 1 2 1 1 2 1 2 2 ...\n $ PuzzleTime : num  49.1 43.3 28.6 47.3 71.8 62.4 67.6 77.6 53.8 59.9 ...\n $ GiggleCount: int  24 20 9 24 30 25 21 34 16 32 ...\n\n\n\n\n\nBefore further processing, you may want to conduct an exploratory data analysis (EDA) to gain insights into the dataset’s distribution and characteristics. There are various ways to do this and also packages for automated EDA analysis (e.g., DataExplorer, GGally, SmartEDA, Hmisc). For this tutorial, we will use the DataExplorer.\n\nAction Steps: Run the code below to create an EDA report. Then check results from your Notebooks folder.\n\n\n```{r}\n#| label: \"Initial EDA\"\n#| purl: false # to exclude this chunk from the R script file\n#| eval: false\n\n# Load/Install DataExplorer package\nif (!requireNamespace(\"DataExplorer\", quietly = TRUE)) {install.packages(\"DataExplorer\")}\nrequire(DataExplorer)\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-initial\", Sys.Date(), sep=\"-\"), # filename\n        report_title = \"Initial EDA Report - Babysteps Dataset\",\n        y = 'PuzzleTime' # to set the outcome variable\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n```\n\n\n\n\nThis step involves identifying and correcting issues in your dataset, such as missing values, errors, outliers, and standardizing variable names, to ensure data quality.\n\n\n\nOverview: Begin by identifying missing values in your dataset. Missing data can occur for various reasons, from non-response in surveys to errors in data entry.\nAction Steps: Use descriptive statistics to identify missing patterns and decide on appropriate methods for handling them, such as imputation or exclusion, based on the nature of your data.\n\n\n```{r}\n#| label: Missing-values\n# insert your code here or delete the section\n```\n\n\n\n\n\nOverview: Data entry errors, inconsistencies in response formats, and other inaccuracies can significantly affect your analysis.\nAction Steps: Validate data ranges (e.g., ages within plausible limits) and consistency (e.g., gender coded uniformly). Correct identified errors where possible, or note them for exclusion or special consideration.\n\n\n\n\n\nOverview: Outliers can influence statistical analyses and may represent either genuine phenomena or data errors.\nAction Steps: Identify outliers through visual (e.g., boxplots) and statistical methods. Investigate their origins and decide whether to keep, adjust, or remove them, documenting your rationale.\n\n\n\n\nEnsure all variable names are in lowercase to maintain consistency across your dataset. This can help avoid case-sensitive errors in your analysis scripts.\n\n```{r}\n#| label: Standardize Variable Names\n\n# lowercase all variables (good practice)\ndataset &lt;- dataset %&gt;% rename_all(tolower)\n```\n\nTip. Check out clean.names() function from janitor package to clean up variable names.\n\n\n\n\nThis step encompasses the processes of adjusting your variables to better fit your analysis needs and preparing your data through various transformations. It ensures that your dataset is in the optimal form for analysis, addressing both the structure of your data and the scales of measurement.\n\n\n\nOverview: Recoding involves adjusting existing variables to better fit your analysis needs, such as combining categories of a nominal variable or changing measurement scales.\nAction Steps: Clearly define your recoding rules and apply them uniformly across your dataset. Document changes to ensure transparency and reproducibility.\n\n\n```{r}\n#| label: \"Recoding variables\"\n\n# Recode wave into an integer for regression analyses\ndataset$wave &lt;- as.integer(gsub(\"T\", \"\", dataset$wave))\n\n# create a new categorical variable AgeGroup\ndataset &lt;- dataset %&gt;%\n  mutate(agegroup = case_when(\n    agemonths &lt;= 14 ~ \"12-14 months\",\n    agemonths &lt;= 20 ~ \"15-20 months\",\n    TRUE ~ \"21-24 months\"\n  ))\n```\n\n\n\n\n\nOverview: Variable scales may need normalization, especially when combining data from different sources or preparing for certain statistical analyses.\nAction Steps: Apply normalization techniques, such as z-score standardization or min-max scaling, to adjust scales. Choose a method appropriate for your data distribution and analysis requirements.\n\n\n\n\n\nOverview: Dummy variables are used to represent categorical data in binary form, which is necessary for many types of statistical modeling.\nAction Steps: Convert categorical variables into dummy variables as needed.\n\n\n\n\n\nAfter cleaning and transforming your data, perform another round of EDA to verify the data preparation steps’ effects and ensure the dataset is ready for analysis. Look for any remaining issues to check the data quality and structure post-cleaning.\n\n```{r}\n#| label: \"EDA-with-processed-data\"\n#| purl: false    # to exclude this chunk from the R script file\n#| eval: false\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-processed\", Sys.Date(), sep=\" - \"),\n        report_title = \"EDA Report with processed data - Babysteps Dataset\",\n        y = 'puzzletime'\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n```\n\n\n\n\n\n```{r}\n#| label: \"Save dataset\"\n# Save in CSV format into processed data -subfolder\nwrite.csv(dataset, here(\"01-data/processed/babysteps.csv\"), row.names = FALSE)\n```"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#load-raw-data-and-packages",
    "href": "04-notebooks/01-prepare-data.html#load-raw-data-and-packages",
    "title": "Prepare data",
    "section": "",
    "text": "Overview: Start by loading required R packages and your dataset into your analysis environment. For the tutorial, we load the raw data created in the Simulate-data notebook.\n\n```{r}\n#| label: setup_prepare\n# Title: Prepare data\n\n\n# Load required packages\nrequire(here)\n```\n\nLoading required package: here\n\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo\n\n```{r}\n#| label: setup_prepare\nrequire(tidyverse)\n```\n\nLoading required package: tidyverse\n\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n```{r}\n#| label: setup_prepare\n# load the raw data\ndataset &lt;- read.csv(here(\"01-data/raw/babysteps-rawdata.csv\"))\n```"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#check-and-modify-data-types",
    "href": "04-notebooks/01-prepare-data.html#check-and-modify-data-types",
    "title": "Prepare data",
    "section": "",
    "text": "Before diving into EDA, it’s crucial to ensure that each variable in your dataset is stored in the most appropriate data type. Correct data types can improve computational efficiency and are essential for appropriate analysis techniques.\n\nAction Steps: Start by listing the current data types of variables in your dataset. This helps identify any variables that may be incorrectly typed, such as numeric variables recognized as character data due to formatting issues.\n\n\n```{r}\n# Display the current data types of all variables in the dataset\nstr(dataset)\n```\n\n'data.frame':   300 obs. of  8 variables:\n $ BabyID     : int  1 2 3 4 5 6 7 8 9 10 ...\n $ StepType   : chr  \"Walking\" \"Walking\" \"Walking\" \"Toddling\" ...\n $ AgeMonths  : int  14 13 13 14 12 12 14 13 13 13 ...\n $ Wave       : chr  \"T1\" \"T1\" \"T1\" \"T1\" ...\n $ SleepHours : int  13 11 10 13 10 13 14 13 11 11 ...\n $ FeedingType: chr  \"Breastfed\" \"Formula\" \"Breastfed\" \"Formula\" ...\n $ PuzzleTime : num  49.1 43.3 28.6 47.3 71.8 62.4 67.6 77.6 53.8 59.9 ...\n $ GiggleCount: int  24 20 9 24 30 25 21 34 16 32 ...\n\n\n\nConvert Data Types: Based on the initial inspection, convert variables to their correct data types. Common conversions include transforming character variables that represent categories into factors and ensuring numeric variables are not mistakenly treated as character or factor types.\n\n\n```{r}\n# Example code to modify data types\n# Adjust the following commands according to the specific needs of your dataset.\n\n# Converting character variables to factors (for categorical variables with a limited number of categories)\ndataset &lt;- dataset %&gt;% mutate_if(is.character, as.factor)\n\n# Converting factors to character (if necessary for string processing)\n# dataset &lt;- dataset %&gt;% mutate_if(is.factor, as.character)\n\n# Converting integers to numeric\n# dataset &lt;- dataset %&gt;% mutate_if(is.integer, as.numeric)\n\n# Recheck data types\nstr(dataset)\n```\n\n'data.frame':   300 obs. of  8 variables:\n $ BabyID     : int  1 2 3 4 5 6 7 8 9 10 ...\n $ StepType   : Factor w/ 3 levels \"Crawling\",\"Toddling\",..: 3 3 3 2 3 2 2 2 3 1 ...\n $ AgeMonths  : int  14 13 13 14 12 12 14 13 13 13 ...\n $ Wave       : Factor w/ 3 levels \"T1\",\"T2\",\"T3\": 1 1 1 1 1 1 1 1 1 1 ...\n $ SleepHours : int  13 11 10 13 10 13 14 13 11 11 ...\n $ FeedingType: Factor w/ 2 levels \"Breastfed\",\"Formula\": 1 2 1 2 1 1 2 1 2 2 ...\n $ PuzzleTime : num  49.1 43.3 28.6 47.3 71.8 62.4 67.6 77.6 53.8 59.9 ...\n $ GiggleCount: int  24 20 9 24 30 25 21 34 16 32 ..."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#initial-exploratory-data-analysis",
    "href": "04-notebooks/01-prepare-data.html#initial-exploratory-data-analysis",
    "title": "Prepare data",
    "section": "",
    "text": "Before further processing, you may want to conduct an exploratory data analysis (EDA) to gain insights into the dataset’s distribution and characteristics. There are various ways to do this and also packages for automated EDA analysis (e.g., DataExplorer, GGally, SmartEDA, Hmisc). For this tutorial, we will use the DataExplorer.\n\nAction Steps: Run the code below to create an EDA report. Then check results from your Notebooks folder.\n\n\n```{r}\n#| label: \"Initial EDA\"\n#| purl: false # to exclude this chunk from the R script file\n#| eval: false\n\n# Load/Install DataExplorer package\nif (!requireNamespace(\"DataExplorer\", quietly = TRUE)) {install.packages(\"DataExplorer\")}\nrequire(DataExplorer)\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-initial\", Sys.Date(), sep=\"-\"), # filename\n        report_title = \"Initial EDA Report - Babysteps Dataset\",\n        y = 'PuzzleTime' # to set the outcome variable\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n```"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#data-cleaning",
    "href": "04-notebooks/01-prepare-data.html#data-cleaning",
    "title": "Prepare data",
    "section": "",
    "text": "This step involves identifying and correcting issues in your dataset, such as missing values, errors, outliers, and standardizing variable names, to ensure data quality.\n\n\n\nOverview: Begin by identifying missing values in your dataset. Missing data can occur for various reasons, from non-response in surveys to errors in data entry.\nAction Steps: Use descriptive statistics to identify missing patterns and decide on appropriate methods for handling them, such as imputation or exclusion, based on the nature of your data.\n\n\n```{r}\n#| label: Missing-values\n# insert your code here or delete the section\n```\n\n\n\n\n\nOverview: Data entry errors, inconsistencies in response formats, and other inaccuracies can significantly affect your analysis.\nAction Steps: Validate data ranges (e.g., ages within plausible limits) and consistency (e.g., gender coded uniformly). Correct identified errors where possible, or note them for exclusion or special consideration.\n\n\n\n\n\nOverview: Outliers can influence statistical analyses and may represent either genuine phenomena or data errors.\nAction Steps: Identify outliers through visual (e.g., boxplots) and statistical methods. Investigate their origins and decide whether to keep, adjust, or remove them, documenting your rationale.\n\n\n\n\nEnsure all variable names are in lowercase to maintain consistency across your dataset. This can help avoid case-sensitive errors in your analysis scripts.\n\n```{r}\n#| label: Standardize Variable Names\n\n# lowercase all variables (good practice)\ndataset &lt;- dataset %&gt;% rename_all(tolower)\n```\n\nTip. Check out clean.names() function from janitor package to clean up variable names."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#data-recoding-and-transformation",
    "href": "04-notebooks/01-prepare-data.html#data-recoding-and-transformation",
    "title": "Prepare data",
    "section": "",
    "text": "This step encompasses the processes of adjusting your variables to better fit your analysis needs and preparing your data through various transformations. It ensures that your dataset is in the optimal form for analysis, addressing both the structure of your data and the scales of measurement.\n\n\n\nOverview: Recoding involves adjusting existing variables to better fit your analysis needs, such as combining categories of a nominal variable or changing measurement scales.\nAction Steps: Clearly define your recoding rules and apply them uniformly across your dataset. Document changes to ensure transparency and reproducibility.\n\n\n```{r}\n#| label: \"Recoding variables\"\n\n# Recode wave into an integer for regression analyses\ndataset$wave &lt;- as.integer(gsub(\"T\", \"\", dataset$wave))\n\n# create a new categorical variable AgeGroup\ndataset &lt;- dataset %&gt;%\n  mutate(agegroup = case_when(\n    agemonths &lt;= 14 ~ \"12-14 months\",\n    agemonths &lt;= 20 ~ \"15-20 months\",\n    TRUE ~ \"21-24 months\"\n  ))\n```\n\n\n\n\n\nOverview: Variable scales may need normalization, especially when combining data from different sources or preparing for certain statistical analyses.\nAction Steps: Apply normalization techniques, such as z-score standardization or min-max scaling, to adjust scales. Choose a method appropriate for your data distribution and analysis requirements.\n\n\n\n\n\nOverview: Dummy variables are used to represent categorical data in binary form, which is necessary for many types of statistical modeling.\nAction Steps: Convert categorical variables into dummy variables as needed."
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#post-cleaning-eda",
    "href": "04-notebooks/01-prepare-data.html#post-cleaning-eda",
    "title": "Prepare data",
    "section": "",
    "text": "After cleaning and transforming your data, perform another round of EDA to verify the data preparation steps’ effects and ensure the dataset is ready for analysis. Look for any remaining issues to check the data quality and structure post-cleaning.\n\n```{r}\n#| label: \"EDA-with-processed-data\"\n#| purl: false    # to exclude this chunk from the R script file\n#| eval: false\n\n# Create the report\ndataset %&gt;%\n    create_report(\n        output_file = paste(\"EDA-report-processed\", Sys.Date(), sep=\" - \"),\n        report_title = \"EDA Report with processed data - Babysteps Dataset\",\n        y = 'puzzletime'\n    )\nmessage(\"The EDA report was created and saved in your notebooks folder\")\n```"
  },
  {
    "objectID": "04-notebooks/01-prepare-data.html#save-the-processed-data",
    "href": "04-notebooks/01-prepare-data.html#save-the-processed-data",
    "title": "Prepare data",
    "section": "",
    "text": "```{r}\n#| label: \"Save dataset\"\n# Save in CSV format into processed data -subfolder\nwrite.csv(dataset, here(\"01-data/processed/babysteps.csv\"), row.names = FALSE)\n```"
  },
  {
    "objectID": "04-notebooks/contact.html",
    "href": "04-notebooks/contact.html",
    "title": "Contact",
    "section": "",
    "text": "1 Feedback\nWe value your feedback. Please let us know your thoughts by filling out the form below.\n\nLoading…"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources for Reproducibility",
    "section": "",
    "text": "In the fascinating world of reproducibility, there is always more. See below some selected resources and references used in creating the tutorials (updated March 2024)."
  },
  {
    "objectID": "resources.html#guides-and-tutorials-on-reproducibility",
    "href": "resources.html#guides-and-tutorials-on-reproducibility",
    "title": "Resources for Reproducibility",
    "section": "1 Guides and tutorials on reproducibility",
    "text": "1 Guides and tutorials on reproducibility\n\nFORRT - Framework for Open and Reproducible Research (link)\nAEA Data Editor Guidance and tools (link)\nOpen Science Training Handbook (link)\nHarrell F E: R Workflow for Reproducible Data Analysis and Reporting (link)\nPeikert, Aaron, & Diemerling, Hannes. (2023). Reproducible Research in R: A Workshop on How to Do the Same Thing More Than Once. Zenodo. https://doi.org/10.5281/zenodo.8069391\nPeikert, A., van Lissa, C. J., & Brandmaier, A. M. (2021). Reproducible Research in R: A Tutorial on How to Do the Same Thing More Than Once. Psych, 3(4), Article 4. https://doi.org/10.3390/psych3040053"
  },
  {
    "objectID": "resources.html#reproducibility-checklists",
    "href": "resources.html#reproducibility-checklists",
    "title": "Resources for Reproducibility",
    "section": "2 Reproducibility checklists",
    "text": "2 Reproducibility checklists\n\nData and Code Availability Standard by AEA Social Science Data Editors: https://datacodestandard.org/\nReproducibility checklist by Meta-Psychology journal\nJournal of Applied Psychology methods checklist 2022 (pdf link)\nWicherts, J. M., Veldkamp, C. L., Augusteijn, H. E., Bakker, M., Van Aert, R., & Van Assen, M. A. (2016). Degrees of freedom in planning, running, analyzing, and reporting psychological studies: A checklist to avoid p-hacking. Frontiers in psychology, 7, 222767. https://doi.org/10.3389/fpsyg.2016.01832\nLombaers, P., Bruin, J. de, & Schoot, R. van de. (2024). Reproducibility and Data storage Checklist for Active Learning-Aided Systematic Reviews. https://doi.org/10.31234/osf.io/g93zf"
  },
  {
    "objectID": "resources.html#r-packages-for-reproducibility",
    "href": "resources.html#r-packages-for-reproducibility",
    "title": "Resources for Reproducibility",
    "section": "3 R packages for reproducibility",
    "text": "3 R packages for reproducibility\nwill be added later"
  },
  {
    "objectID": "resources.html#other-references",
    "href": "resources.html#other-references",
    "title": "Resources for Reproducibility",
    "section": "4 Other References",
    "text": "4 Other References"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "All feedback is highly valued. Especially ideas to make\nthings more simple and easy for non-coders.\nEmail: juuso.repo(a)utu.fi or contact via LinkedIn\nJuuso Repo\nSenior Researcher\nInvest Flagship Research Center\nUniversity of Turku, Finland\n————————————————————"
  },
  {
    "objectID": "resources.html#section",
    "href": "resources.html#section",
    "title": "Resources for Reproducibility",
    "section": "4 ",
    "text": "4"
  },
  {
    "objectID": "babysteps.html#preparing-your-data-in-a-reproducible-way",
    "href": "babysteps.html#preparing-your-data-in-a-reproducible-way",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "2.1 Preparing your data in a reproducible way",
    "text": "2.1 Preparing your data in a reproducible way\nFor reproducibility, it is vital to keep the raw data untouched and create code which includes all steps done for processing and preparing the data for analysis. All data cleaning done in R ensures the transparency of your research.\nA good open science practice (when possible) is to simulate data when planning analysis or preregistering your study (Peikert et al., 2021). Once the empirical data is available, you can replace the simulated data - and get the results quicker.\n\n\n\n\n\n# create flowchart\nflowchart LR\n    step0(\"Simulate &lt;br&gt;and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse and &lt;br&gt;generate outputs\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Manuscript or&lt;br&gt; presentation\")\n    step6(\"Text\")\n    \n    step0 --&gt; step1 --&gt; step2 --&gt; step3 --&gt; step4a\n    step3 --&gt; step4b\n    step4a --&gt; step5\n    step4b --&gt; step5\n    step6 --&gt; step5\n\n\n\n\n\nFor this tutorial, we simulate a study on baby steps. In the first notebook we create raw data and a sample codebook.\n\nDownload the simulate-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\n\n\n# Download simulate-data notebook \n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#              \"04-notebooks/00-simulate-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n\nNotebook is saved in your Notebooks -folder. Open and run the code.\n\n\nPrepare-data -notebook is an example and a template for creating reproducible steps for processing raw data.\n\nDownload the prepare-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\n\n\n# Download prepare-data notebook\n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#             \"04-notebooks/01-prepare-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n\nNotebook is saved in your Notebooks -folder. Open and run the code.\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can create your own notebook by selecting: File - New File - R Notebook (in RStudio).\nOrganize your analyses into multiple notebooks. A good practice is to number them following your analytic plan."
  },
  {
    "objectID": "babysteps.html#prepare-your-data-for-sharing",
    "href": "babysteps.html#prepare-your-data-for-sharing",
    "title": "Baby steps for a Reproducible Workflow in R",
    "section": "3.4 Prepare your data for sharing",
    "text": "3.4 Prepare your data for sharing\nFor full reproducibility, share your raw data when possible. Check these steps before sharing:\n\nConsent. Ensure you have consent from the study participants and your institution to share the data.\nFormat. Make sure your data is in open file format like .csv.\nDocumentation. Include necessary documentation in the metadata folder (e.g., codebooks, readme, licenses, ethics). Use open file formats. See example codebook in the simulate-data notebook.\nDe-identify. If needed, prepare a de-identified version of your raw data to manage the risk of identifying individuals in the dataset.\n\n\n\n\n\n\n\nNote\n\n\n\nWhat’s a reproducible researcher’s favorite movie?\n“Groundhog Day” – they love seeing the same results every time!"
  },
  {
    "objectID": "04-notebooks/02-create-tables-and-figures.html#the-report-package-for-automatic-reports",
    "href": "04-notebooks/02-create-tables-and-figures.html#the-report-package-for-automatic-reports",
    "title": "Generating Reproducible Tables and Figures",
    "section": "0.8 The report package for automatic reports",
    "text": "0.8 The report package for automatic reports\nThe report package produces automatic reports of models and tests, following best practices guidelines (APA). The report() function creates a textual narrative of the results and report_table creates - a results table. A short tutorial video\nFor the demo, we will use the linear model (model_lm) and the mixed-effects model (model3) we created earlier.\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Assuming 'data' contains the interaction term effect\nggplot(babysteps, aes(x = agemonths, y = puzzletime, color = steptype)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", aes(group = steptype), se = FALSE) +\n  theme_minimal() +\n  labs(title = \"Interaction of Age and Step Type on Puzzle Time\",\n       x = \"Age in Months\",\n       y = \"Puzzle Time (minutes)\") +\n  scale_color_brewer(palette = \"Set1\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n# Generate a data frame for predictions\npredict_data &lt;- expand.grid(agemonths = seq(min(babysteps$agemonths), max(babysteps$agemonths), length.out = 100),\n                            steptype = unique(babysteps$steptype),\n                            babyid = unique(babysteps$babyid)[1])  # Use a representative babyid\n\n# Predict puzzletime using the model\npredict_data$puzzletime_pred &lt;- predict(model2, newdata = predict_data, re.form = NA)  # Fixed effects only\n\n\n# Plotting observed data points\nggplot(babysteps, aes(x = agemonths, y = puzzletime, color = steptype)) +\n#  geom_point(alpha = 0.5) +\n  # Add predicted lines from the model\n  geom_line(data = predict_data, aes(x = agemonths, y = puzzletime_pred, color = steptype), linewidth = 1) +\n  # Add a smooth line through the observed data for comparison\n  theme_minimal() +\n  labs(title = \"Interaction of Age and Step Type on Puzzle Time\",\n       x = \"Age in Months\",\n       y = \"Puzzle Time (minutes)\") +\n  scale_color_brewer(palette = \"Set1\")"
  },
  {
    "objectID": "babysteps.html#creating-the-project-folder-structure",
    "href": "babysteps.html#creating-the-project-folder-structure",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "1.2 Creating the project folder structure",
    "text": "1.2 Creating the project folder structure\nThe code below will create a coherent folder structure for your project. You can modify the folder names for your own project as needed. Alternatively, you may create folders without code. Note these good practices when working with folders and files:\n\nNaming conventions for folders and files: only lowercase letters; no spaces but-dashes (or_underscores) instead. Prefix numbers with leading zeros ensure automatic sorting (01-data, 02-scripts…).\nRelative file paths. Always use relative folder paths for reproducibility. Relative means data/file.csv instead of absolute one: C:/Users/Documents…./file.csv\nHere -function (optional). Wrap the file path with the here function to ensure the path is always relative to the project root and works in all contexts, e.g., here(\"data/file.csv\"). Requires R package Here.\nSeparate folders for public sharing. For our reproducible example, we will only need the folders: data, scripts, and supplementary for public sharing.\n\nRun the code below to create your folders.\n\n# List folder names into a vector object, folders not used for tutorial are commented out\nfolders &lt;- c(\n  \"01-data\",\n    \"01-data/raw\", # Unmodified, original raw data\n    \"01-data/processed\", # Data after cleaning or transformations\n    \"01-data/metadata\", # Codebooks, dictionaries etc.\n#   \"01-data/methods\", # Ethics, protocols, licenses etc.\n  \"02-scripts\", # Scripts for public sharing\n  \"03-supplementary\", # Additional material for public sharing\n  \"04-notebooks\", # Notebooks for running analyses and writing notes\n  \"05-outputs\",\n    \"05-outputs/figures\", # Main graphs and visualizations\n    \"05-outputs/tables\", # Main result tables\n#   \"05-outputs/manuscripts\", # Drafts and final versions of papers\n#   \"05-outputs/presentations\", # Slides, posters, etc.\n  \"99-archive\" # Archived materials, old versions \n)    \n# Create folders (loop through the vector) \nfor (folder in folders) {dir.create(folder, recursive = TRUE, showWarnings = TRUE)}\n# Print message\nmessage(\"Project folders created successfully.\")\n\n\n\n\n\n\n\nNote\n\n\n\nWhy was the reproducibility advocate bad at hide and seek?  Because they always left a trail to reproduce their steps!"
  },
  {
    "objectID": "babysteps.html#preparing-data-in-a-reproducible-way",
    "href": "babysteps.html#preparing-data-in-a-reproducible-way",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "2.1 Preparing data in a reproducible way",
    "text": "2.1 Preparing data in a reproducible way\nFor reproducibility, it is vital to keep the raw data untouched and create code which includes all steps done for processing and preparing the data for analysis. All data cleaning done in R ensures the transparency of your research.\nA good open science practice (when possible) is to simulate data when planning analysis or preregistering your study (Peikert et al., 2021). Once the empirical data is available, you can replace the simulated data - and get the results quicker.\n\n\n\n\n\nflowchart LR\n    step0(\"Simulate &lt;br&gt;and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse and &lt;br&gt;generate outputs\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Manuscript or&lt;br&gt; presentation\")\n    step6(\"Text\")\n    \n    step0 --&gt; step1 --&gt; step2 --&gt; step3 --&gt; step4a\n    step3 --&gt; step4b\n    step4a --&gt; step5\n    step4b --&gt; step5\n    step6 --&gt; step5\n\n\n\n\n\nFor this tutorial, we simulate a study on baby steps. In the first notebook we create raw data and a sample codebook.\n\nDownload the simulate-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\n\n\n# Download simulate-data notebook \ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/00-simulate-data.qmd\", \n              \"04-notebooks/00-simulate-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n\nNotebook is saved in your Notebooks -folder. Open and run the code.\n\n\nPrepare-data -notebook is an example and a template for creating reproducible steps for processing raw data.\n\nDownload the prepare-data notebook by running the code below (if not downloaded already)\nOpen the notebook and run all code.\n\n\n# Download prepare-data notebook\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/01-prepare-data.qmd\", \n             \"04-notebooks/01-prepare-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n\nNotebook is saved in your Notebooks -folder. Open and run the code.\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can create your own notebook by selecting: File - New File - R Notebook (in RStudio).\nOrganize your analyses into multiple notebooks. A good practice is to number them following your analytic plan."
  },
  {
    "objectID": "babysteps.html#creating-reproducible-analyses-tables-and-figures",
    "href": "babysteps.html#creating-reproducible-analyses-tables-and-figures",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "2.2 Creating reproducible analyses, tables and figures",
    "text": "2.2 Creating reproducible analyses, tables and figures\nThe next notebook shows how to create reproducible tables and figures in R. Also in APA style! This will avoid the need for copy-pasting values from R to a word processor, ensuring fewer errors and - better reproducibility! You can export the formatted table into Word, PowerPoint, HTML, or pdf.\n\nDownload the notebook by running the code below.\nOpen the notebook to follow and run the examples.\n\n\n# Download a notebook for creating tables\ndownload.file(\"https://raw.githubusercontent.com/juusorepo/ReproRepo/master/04-notebooks/02-create-tables-and-figures.qmd\", \n              here(\"04-notebooks/02-create-tables-and-figures.qmd\"))\nmessage(\"Descript -notebooks downloaded and saved in your notebooks -folder. Open and try!\")\n\nDescript -notebooks downloaded and saved in your notebooks -folder. Open and try!\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhy did the scientist break up with reproducibility?\nBecause they wanted a relationship with fewer variables!"
  },
  {
    "objectID": "babysteps.html#preparing-code-for-public-sharing",
    "href": "babysteps.html#preparing-code-for-public-sharing",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.1 Preparing code for public sharing",
    "text": "3.1 Preparing code for public sharing\n\nComment the code. Make sure the code you plan to share is properly commented. Good practice is to write the comments before you write the code. If you lack comments, you can use Chat GPT to assist and review your code (with caution, naturally). With the prompt below, you can keep adding your scripts one at a time. Replace your code with the commented version, and test the code. Example prompt:\n\n\nDearest AI, please revise and improve the comments in my R script to increase its clarity and convey its purpose, without changing the code itself. Identify any errors separately and alert me to potential reproducibility issues. I will submit sections of the code sequentially for your review.\n\n\nUse README files. For complicated scripts and analyses, you can add a README text file with extensive documentation.\nFor a style guide for coding in R, see: style.tidyverse.org. It includes best practices for e.g., naming objects, and tools for reviewing your code.\nDocument R version and packages used. Documenting ‘dependencies’ ensures that future researchers can replicate the exact computational environment in which your analysis was conducted. With the report package, you can create this as a supplementary file with the code below.\n\n\n# Create a supplementary file with R version and packages used\n# load report package\nif (!requireNamespace(\"report\", quietly = TRUE)) {install.packages(\"report\")}\nrequire(report)\n\n# Create dependencies report\ndependencies &lt;- report(sessionInfo())\n\n# Export report as a supplementary text file \nwriteLines(dependencies, here(\"03-supplementary/dependencies.txt\"))\n\n# print a summary of the report\nmessage(\"Dependencies summary saved in the 03-supplementary -folder. A brief summary:\")\nsummary(report(sessionInfo()))\n\nThe analysis was done using the R Statistical language (v4.2.2; R Core Team,\n2022) on Windows 10 x64, using the packages report (v0.5.8), here (v1.0.1) and\nknitr (v1.45).\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor automated computational reproducibility, you can use renv for dependency management or Docker for containerization.\n\n\n\n3.1.1 Extracting code from notebooks - the PURL function\nAs you may have noticed from the example notebooks, we used notebooks also for personal notes and exploratory analyses. How can one manage all that in the same file? With help from the ‘purl’ function!\nThe “purl” function from the knitr package will extract all executable code from the notebooks and save them in in an .R script file - for public sharing. The trick is that it only extracts the code chunks with comments, not the notes (text outside code chunks) or results. In addition, the code chunks marked with purl=FALSE (in the title, see example below), will not be included in the .R script file created. Thus, you can keep draft analyses and personal notes in the same notebook with the code for public sharing.\n\nRun the code below to create .R script files from the notebooks.\nOpen an .R script file created to view the result.\n\n\n# Extract simulate-data: use purl to extract r-code from notebook into script file\npurl(\n    here(\"04-notebooks/00-simulate-data.qmd\"), # the source notebook \n    output=here(\"02-scripts/00-simulate-data.R\"), # the output script file\n    documentation = 1 # to include only the code chunks\n    )\n\n# Extract prepare-data\npurl(\n    here(\"04-notebooks/01-prepare-data.qmd\"), \n    output=here(\"02-scripts/01-prepare-data.R\"), \n    documentation = 1 \n    )\n\n# Extract create-tables-and-figures\npurl(here(\"04-notebooks/02-create-tables-and-figures.qmd\"), \n     output=here(\"02-scripts/02-create-tables-and-figures.R\"),\n     documentation = 1)"
  },
  {
    "objectID": "babysteps.html#running-the-analyses-from-r-script-files",
    "href": "babysteps.html#running-the-analyses-from-r-script-files",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.2 Running the analyses from R script files",
    "text": "3.2 Running the analyses from R script files\nAfter the R script files are created, it is better to test the scripts before sharing. You can use the following code chunk to re-run your analyses without opening the R script files. It is good practice to empty the R environment before running the analyses.\n\nRestart R Session in RStudio: Select Session &gt; Restart R\nRun the below code chunk.\n\n\n# Clear all objects from memory to ensure reproducibility\nrm(list = ls())\n\n# 0 Simulate data\nsource(here(\"02-scripts/00-simulate-data.R\"))\n\n# 1 Prepare data\nsource(here(\"02-scripts/01-prepare-data.R\"))\n\n# 2 Run analyses to create tables\nsource(here(\"02-scripts/02-create-tables-and-figures.R\"))\n\n\n\n\n\n\n\nNote\n\n\n\nStarting each code chunk with “#| label: ” will split the script file into easily readable chunks. Note that the purl function may not work with all types of code, and you may need to do some manual editing."
  },
  {
    "objectID": "babysteps.html#sharing-notebooks-with-co-authors",
    "href": "babysteps.html#sharing-notebooks-with-co-authors",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.3 Sharing notebooks with co-authors",
    "text": "3.3 Sharing notebooks with co-authors\nBest way to share some analyses with your colleagues? Notebooks are great for that. They can be read in any browser and can include code and your notes and questions for your colleagues. Although maybe intimidating to show others your code, it’s an important step in making your research reproducible. With this example, we render/knit one notebook into html format for sharing,\n\nOpen one of the example notebooks, for example 01-prepare-data.qmd\nTo render your notebook in RStudio, click on the “Render” button. This process converts the notebook into an HTML file, facilitating easy sharing. To alter the output format, insert format: html at the notebook header, replacing html with pdf, docx, or another desired output format.\n\nSelect Render. RStudio will render the notebook into a .html file, which you can easily share. You can change the output format with inserting the following in the very top of the notebook “format: html” and changing the html to pdf, docx, or other format."
  },
  {
    "objectID": "babysteps.html#preparing-data-for-sharing",
    "href": "babysteps.html#preparing-data-for-sharing",
    "title": "Baby Steps for a Reproducible Workflow in R",
    "section": "3.4 Preparing data for sharing",
    "text": "3.4 Preparing data for sharing\nFor full reproducibility, share your raw data when possible. Check these steps before sharing:\n\nConsent. Ensure you have consent from the study participants and your institution to share the data.\nFormat. Make sure your data is in open file format like .csv.\nDocumentation. Include necessary documentation in the metadata folder (e.g., codebooks, readme, licenses, ethics). Use open file formats. See example codebook in the simulate-data notebook.\nDe-identify. If needed, prepare a de-identified version of your raw data to manage the risk of identifying individuals in the dataset.\n\n\n\n\n\n\n\nNote\n\n\n\nWhat’s a reproducible researcher’s favorite movie?\n“Groundhog Day” – they love seeing the same results every time!"
  },
  {
    "objectID": "resources.html#r-packages-used-in-the-tutorials",
    "href": "resources.html#r-packages-used-in-the-tutorials",
    "title": "Resources for Reproducibility",
    "section": "3 R packages used in the tutorials",
    "text": "3 R packages used in the tutorials\n\nModelsummary - Creates tables and plots to present descriptive statistics and to summarize statistical models in R.\nFlextable - a framework to easily create tables for reporting and publications.\nReport - “From R to your manuscript”."
  }
]