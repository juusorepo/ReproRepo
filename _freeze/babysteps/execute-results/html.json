{
  "hash": "cc7a848e608f3de404fbabe203ff5d09",
  "result": {
    "markdown": "---\ntitle: \"Baby steps for a Reproducible Workflow in R\"\nfreeze: auto\ndate: \"2024-03-18\"\n---\n\n\nThe idea of *methods reproducibility* is to provide sufficient documentation of procedures and data to enable repeating the same procedures, in a similar or different context (Goodman et al., 2016). A reproducible workflow, then, is a systematically organized sequence of steps to accomplish this. As the value placed on reproducibility continues to rise within and beyond academia, mastering these practices is increasingly beneficial. This tutorial aims to present the basics rather than delve into all the complexities of all advanced stuff. It covers steps from preparing data for analysis to creating reproducible tables and figures, to be included in a paper or presentation.\n\n**The basic steps for reproducible workflow are:**\n\n\n```{mermaid}\nflowchart LR\n    step1(\"1. Set up the project <br> \")\n    step2(\"2. Prepare and analyse data <br> and generate outputs\")\n    step3(\"3. Prepare code and data <br> for sharing\")\n    step4(\"4. Share in public\")\n    \n    step1 --> step2 --> step3 --> step4\n```\n\n\n\n**A reproducible workflow enables you to:**\n\n-   Adjust code or data and efficiently re-run all analyses.\n\n-   Conduct a review before publishing, covering phases from data preparation to generation of outputs.\n\n-   Understand your research processes months later, effectively collaborating with your future self.\n\n-   Share or pass along your project and provide the necessary code for others to extend your work.\n\n-   Enhance the credibility and trustworthiness of your research.\n\nThe guide and provided code snippets serve as a template for initiating new projects or creating reproducible versions of existing ones. The best way to learn is to download the notebooks, experiment with the examples in RStudio, and adapt them to your project and preferences. To follow along, ensure that you have R and RStudio installed and up to date.\n\n::: callout-tip\nThese basic steps can be expanded to include e.g., producing a complete manuscript in RStudio, managing version control with tools like Git, and ensuring computational reproducibility through containerization technologies such as Docker. See resources page for more. \n:::\n\n# STEP ONE: Create a project and folder structure\n\nWe begin with creating a tidy nest for all files related to the study/project. Or at least for the files related to data and analysis! Creating a coherent folder structure that can be used in all your future research projects will facilitate collaboration and make your life easier - with more time for reproduction!\n\n## Create a RStudio project\n\n-   In RStudio, start fresh and select File - New Project - New Directory - Empty Project.\n\n-   Copy and run below code **in RStudio** **console** window to download this notebook to your project folder. (or download **from here** and save to project folder)\n\n    `download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \"baby-steps.qmd\")`\n\n-   Open the notebook in RStudio.\n\n-   Run the below code chunk to install required packages. Tip: place cursor inside the chunk and press Ctrl+Shift+Enter. The Here package simplifies file path management by making all paths relative to the project root.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code: Load packages\"}\n## Load packages: knitr and here\n# Here  for file path management and Knitr for dynamic report generation\n# Check if packages are installed, and install if not\nif (!requireNamespace(\"knitr\", quietly = TRUE)) {install.packages(\"knitr\")}\nif (!requireNamespace(\"here\", quietly = TRUE)) {install.packages(\"here\")}\n# Load packages\nrequire(knitr)\nrequire(here)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code: Need help with the file?\"}\n# If errors, you may set the working directory with this function (uncomment it)\n# Check your working directory\n# getwd()\n# Set your working directory\n# setwd(\"c:/your-path-to-project-folder/\")\n\n# Check the file is found\nif (file.exists(here(\"babysteps.qmd\"))) {\n  print(\"Babysteps file found!\")\n} else {\n  print(\"Note! Please check the babysteps.qmd file and your working directory.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Babysteps file found!\"\n```\n:::\n:::\n\n\n## Create the project folder structure\n\nThe code below will create a coherent folder structure for your project. You can modify the folder names for your own project as needed. Alternatively, you may create folders without code. Note these good practices when working with folders and files:\n\n-   **Naming conventions** for folders and files: only lowercase letters; no spaces but-dashes (or_underscores) instead. Prefix numbers with leading zeros ensure automatic sorting (01-data, 02-scripts...).\n\n-   **Relative file paths**. Always use relative folder paths for reproducibility. Relative means `data/file.csv` instead of absolute one: `C:/Users/Documentsâ€¦./file.csv`\n\n-   **Here** -**function (optional)**. Wrap the file path with the here function to ensure the path is always relative to the project root and works in all contexts, e.g., `here(\"data/file.csv\")`. Requires R package Here.\n\n-   **Separate folders for public sharing.** For our reproducible example, we will only need the folders: data, scripts, and supplementary for public sharing*.*\n\nRun the code below to create your folders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List folder names into a vector object, folders not used for tutorial are commented out\nfolders <- c(\n  \"01-data\",\n    \"01-data/raw\", # Unmodified, original raw data\n    \"01-data/processed\", # Data after cleaning or transformations\n    \"01-data/metadata\", # Codebooks, dictionaries etc.\n#   \"01-data/methods\", # Ethics, protocols, licenses etc.\n  \"02-scripts\", # Scripts for public sharing\n  \"03-supplementary\", # Additional material for public sharing\n  \"04-notebooks\", # Notebooks for running analyses and writing notes\n  \"05-outputs\",\n    \"05-outputs/figures\", # Main graphs and visualizations\n    \"05-outputs/tables\", # Main result tables\n#   \"05-outputs/manuscripts\", # Drafts and final versions of papers\n#   \"05-outputs/presentations\", # Slides, posters, etc.\n  \"99-archive\" # Archived materials, old versions \n)    \n# Create folders (loop through the vector) \nfor (folder in folders) {dir.create(folder, recursive = TRUE, showWarnings = TRUE)}\n# Print message\nmessage(\"Project folders created successfully.\")\n```\n:::\n\n\n::: callout-note\n\nWhy was the reproducibility advocate bad at hide and seek?\\ \nBecause they always left a trail to reproduce their steps!\n\n:::\n\n# STEP TWO: Prepare and analyse data and generate reproducible tables and figures\n\nUsing notebooks instead of plain text .R scripts offers many benefits. Notebooks integrate code, results, and notes in one document, making them more readable, enhancing collaboration and reproducibility. In this tutorial, we will use Quarto notebooks (.qmd) which is a next generation version of R Markdown and becoming the new gold standard.\n\n## Preparing your data in a reproducible way\n\nFor reproducibility, it is vital to keep the raw data untouched and create code which includes all steps done for processing and preparing the data for analysis. All data cleaning done in R ensures the transparency of your research.\n\nA good open science practice (when possible) is to **simulate data** when planning analysis or preregistering your study (Peikert et al., 2021). Once the empirical data is available, you can replace the simulated data - and get the results quicker.\n\n\n```{mermaid}\n# create flowchart\nflowchart LR\n    step0(\"Simulate <br>and plan\")\n    step1(\"Collect\")\n    step2(\"Process\")\n    step3(\"Analyse and <br>generate outputs\")\n    step4a(\"Figures\")\n    step4b(\"Tables\")\n    step5(\"Manuscript or<br> presentation\")\n    step6(\"Text\")\n    \n    step0 --> step1 --> step2 --> step3 --> step4a\n    step3 --> step4b\n    step4a --> step5\n    step4b --> step5\n    step6 --> step5\n```\n\n\nFor this tutorial, we simulate a study on baby steps. In the first notebook we create raw data and a sample codebook.\n\n-   **Download the simulate-data notebook** by running the code below (if not downloaded already)\n-   **Open the notebook** and run all code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download simulate-data notebook \n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#              \"04-notebooks/00-simulate-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNotebook is saved in your Notebooks -folder. Open and run the code.\n```\n:::\n:::\n\n\nPrepare-data -notebook is an example and a template for creating reproducible steps for processing raw data.\n\n-   **Download the prepare-data notebook** by running the code below (if not downloaded already)\n-   **Open the notebook** and run all code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download prepare-data notebook\n#download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#             \"04-notebooks/01-prepare-data.qmd\")\nmessage(\"Notebook is saved in your Notebooks -folder. Open and run the code.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNotebook is saved in your Notebooks -folder. Open and run the code.\n```\n:::\n:::\n\n\n::: callout-tip\nYou can create your own notebook by selecting: File - New File - R Notebook (in RStudio).\n\nOrganize your analyses into multiple notebooks. A good practice is to number them following your analytic plan.\n:::\n\n## Create reproducible analyses, tables and figures\n\nThe next notebook shows how to create reproducible tables and figures in R. Also in APA style! This will avoid the need for copy-pasting values from R to a word processor, ensuring fewer errors and - better reproducibility! You can export the formatted table into Word, PowerPoint, HTML, or pdf.\n\n-   **Download the notebook** by running the code below.\n-   **Open the notebook** to follow and run the examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download a notebook for creating tables\n# download.file(\"https://juusorepo.github.io/IODS-project/chapter1.Rmd\", \n#              here(\"04-notebooks/02-create-tables-and-figures.qmd\"))\nmessage(\"Descript -notebooks downloaded and saved in your notebooks -folder. Open and try!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDescript -notebooks downloaded and saved in your notebooks -folder. Open and try!\n```\n:::\n:::\n\n\n::: callout-note \nWhy did the scientist break up with reproducibility?\\\nBecause they wanted a relationship with fewer variables! \n:::\n\n# STEP THREE: Prepare data and code for sharing\n\n\n\n```{mermaid}\nflowchart LR\n    step0(\"Prepare data<br> for sharing\")\n    step1(\"Prepare notebooks<br> for sharing\")\n    step2(\"Extract code from<br> notebooks with purl\")\n    step3(\"Test the code scripts\")\n    step1a(\"Share notebooks<br>with colleagues\")\n    step4(\"Share code and<br> data in public\")\n    \n    step1 --> step2 --> step3 --> step4\n    step1 --> step1a\n    step0 --> step4\n```\n\n\n\n## Prepare your code for public sharing\n\n-   **Comment the code.** Make sure the code you plan to share is properly commented. Good practice is to write the comments before you write the code. If you lack comments, you can use Chat GPT to *assist* and review your code (with caution, naturally). With the prompt below, you can keep adding your scripts one at a time. Replace your code with the commented version, and test the code. Example prompt:\n\n> Dearest AI, please revise and improve the comments in my R script to increase its clarity and convey its purpose, without changing the code itself. Identify any errors separately and alert me to potential reproducibility issues. I will submit sections of the code sequentially for your review.\n\n-   **Use README files**. For complicated scripts and analyses, you can add a README text file with extensive documentation.\n-   **For a style guide** for coding in R, see: [style.tidyverse.org](https://style.tidyverse.org/){.uri}. It includes best practices for e.g., naming objects, and tools for reviewing your code.\n-   **Document R version and packages used.** Documenting 'dependencies' ensures that future researchers can replicate the exact computational environment in which your analysis was conducted. With the report package, you can create this as a supplementary file with the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a supplementary file with R version and packages used\n# load report package\nif (!requireNamespace(\"report\", quietly = TRUE)) {install.packages(\"report\")}\nrequire(report)\n\n# Create dependencies report\ndependencies <- report(sessionInfo())\n\n# Export report as a supplementary text file \nwriteLines(dependencies, here(\"03-supplementary/dependencies.txt\"))\n\n# print a summary of the report\nmessage(\"Dependencies summary saved in the 03-supplementary -folder. A brief summary:\")\nsummary(report(sessionInfo()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe analysis was done using the R Statistical language (v4.2.2; R Core Team,\n2022) on Windows 10 x64, using the packages report (v0.5.8), here (v1.0.1) and\nknitr (v1.45).\n```\n:::\n:::\n\n\n::: callout-tip\nFor automated computational reproducibility, you can use\\* [renv](https://rstudio.github.io/renv/articles/renv.html) \\*for dependency management or Docker for containerization.\n:::\n\n### **Extract code from notebooks - the PURL function**\n\nAs you may have noticed from the example notebooks, we used notebooks also for personal notes and exploratory analyses. How can one manage all that in the same file? With help from the 'purl' function!\n\nThe \"purl\" function from the knitr package will extract all executable code from the notebooks and save them in in an .R script file - for public sharing. The trick is that it only extracts the code chunks with comments, not the notes (text outside code chunks) or results. In addition, the code chunks marked with **purl=FALSE** (in the title, see example below), will **not be included** in the .R script file created. Thus, you can keep draft analyses and personal notes in the same notebook with the code for public sharing.\n\n-   **Run the code** below to create .R script files from the notebooks.\n\n-   **Open an .R script file** created to view the result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract simulate-data: use purl to extract r-code from notebook into script file\npurl(\n    here(\"04-notebooks/00-simulate-data.qmd\"), # the source notebook \n    output=here(\"02-scripts/00-simulate-data.R\"), # the output script file\n    documentation = 1 # to include only the code chunks\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                           \n  |                                                     |   0%\n  |                                                           \n  |.........                                            |  17%                 \n  |                                                           \n  |..................                                   |  33% [setup-simulate]\n  |                                                           \n  |..........................                           |  50%                 \n  |                                                           \n  |...................................                  |  67% [codebook]      \n  |                                                           \n  |............................................         |  83%                 \n  |                                                           \n  |.....................................................| 100% [simulate-data] \n                                                                                                           \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/00-simulate-data.R\"\n```\n:::\n\n```{.r .cell-code}\n# Extract prepare-data\npurl(\n    here(\"04-notebooks/01-prepare-data.qmd\"), \n    output=here(\"02-scripts/01-prepare-data.R\"), \n    documentation = 1 \n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                               \n  |                                         |   0%\n  |                                               \n  |..                                       |   4%                             \n  |                                               \n  |....                                     |   9% [setup_prepare]             \n  |                                               \n  |.....                                    |  13%                             \n  |                                               \n  |.......                                  |  17% [display_data_structure]    \n  |                                               \n  |.........                                |  22%                             \n  |                                               \n  |...........                              |  26% [modify-data-types]         \n  |                                               \n  |............                             |  30%                             \n  |                                               \n  |..............                           |  35% [Initial-EDA]               \n  |                                               \n  |................                         |  39%                             \n  |                                               \n  |..................                       |  43% [Missing-values]            \n  |                                               \n  |....................                     |  48%                             \n  |                                               \n  |.....................                    |  52% [Correcting Errors]         \n  |                                               \n  |.......................                  |  57%                             \n  |                                               \n  |.........................                |  61% [Handling Outliers]         \n  |                                               \n  |...........................              |  65%                             \n  |                                               \n  |.............................            |  70% [Standardize Variable Names]\n  |                                               \n  |..............................           |  74%                             \n  |                                               \n  |................................         |  78% [Recoding variables]        \n  |                                               \n  |..................................       |  83%                             \n  |                                               \n  |....................................     |  87% [EDA-with-processed-data]   \n  |                                               \n  |.....................................    |  91%                             \n  |                                               \n  |.......................................  |  96% [Save dataset]              \n  |                                               \n  |.........................................| 100%                             \n                                                                                                                       \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/01-prepare-data.R\"\n```\n:::\n\n```{.r .cell-code}\n# Extract create-tables-and-figures\npurl(here(\"04-notebooks/02-create-tables-and-figures.qmd\"), \n     output=here(\"02-scripts/02-create-tables-and-figures.R\"),\n     documentation = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                         \n  |                                   |   0%\n  |                                         \n  |.                                  |   4%                                   \n  |                                         \n  |...                                |   7% [load-processed-data-and-packages]\n  |                                         \n  |....                               |  11%                                   \n  |                                         \n  |.....                              |  15% [skim-summary]                    \n  |                                         \n  |......                             |  19%                                   \n  |                                         \n  |........                           |  22% [tbl-summary]                     \n  |                                         \n  |.........                          |  26%                                   \n  |                                         \n  |..........                         |  30% [tbl-preview-summary]             \n  |                                         \n  |............                       |  33%                                   \n  |                                         \n  |.............                      |  37% [export-outputs]                  \n  |                                         \n  |..............                     |  41%                                   \n  |                                         \n  |................                   |  44% [tbl-linear-regression]           \n  |                                         \n  |.................                  |  48%                                   \n  |                                         \n  |..................                 |  52% [preview-tbl-linear-regression]   \n  |                                         \n  |...................                |  56%                                   \n  |                                         \n  |.....................              |  59% [tbl-mixed-effects]               \n  |                                         \n  |......................             |  63%                                   \n  |                                         \n  |.......................            |  67% [fig-coefs]                       \n  |                                         \n  |.........................          |  70%                                   \n  |                                         \n  |..........................         |  74% [fig1-preview]                    \n  |                                         \n  |...........................        |  78%                                   \n  |                                         \n  |.............................      |  81% [report-results-lm]               \n  |                                         \n  |..............................     |  85%                                   \n  |                                         \n  |...............................    |  89% [report-results-mixed]            \n  |                                         \n  |................................   |  93%                                   \n  |                                         \n  |.................................. |  96% [fig-interaction]                 \n  |                                         \n  |...................................| 100%                                   \n                                                                                                                             \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/juuso/OneDrive - Vaikuttava Yritys Oy/0 Oma RStudio/ReproRepo/02-scripts/02-create-tables-and-figures.R\"\n```\n:::\n:::\n\n\n## Run the analyses from R script files\n\nAfter the R script files are created, it is good to test the scripts before sharing. You can use the following code chunk to re-run your analyses without opening the R script files. It is good practice to empty the R environment before running the analyses.\n\n-   Restart R Session in RStudio: Select `Session > Restart R`\n\n-   Run the below code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run analyses from R -----------------------------------------\n\n# Clears all objects from memory to ensure reproducibility\nrm(list = ls())\n\n\n# 0 Simulate data\nsource(here(\"02-scripts/00-simulate-data.R\"))\n\n# 1 Prepare data\nsource(here(\"02-scripts/01-prepare-data.R\"))\n\n# 2 Run analyses to create tables\nsource(here(\"02-scripts/02-create-tables-and-figures.R\"))\n```\n:::\n\n\n*Tip: You can run one row at a time by placing your cursor in the row and pressing Ctrl+Enter.*\n\n*Tip: Starting each code chunk with \"title-for-chunk ------------------------------------\" will break up your script file into easily readable chunks.*\n\n*Note. the Purl function is not perfect. It may not work with all types of code, and you may need to do some manual editing. For example, it may not work with some types of loops or functions. It is also good to check the script file for any errors or missing parts.*\n\n## Share your notebook with co-authors\n\nBest way to share some analyses with your colleagues? Notebooks are great for that. They can be read in any browser and can include code and your notes and questions for your colleagues. Although maybe intimidating to show others your code, it's an important step in making your research reproducible.\nWith this example, we render/knit one notebook into html format for sharing,\n\n-   Open one of the notebooks, for example 01-prepare-data.qmd\n\n-   Select Render. RStudio will render the notebook into a .html file, which you can easily share. You can change the output format with inserting the following in the very top of the notebook \"format: html\" and changing the html to pdf, docx, or other format. \n\n\n## Prepare your data for sharing \n\nFor full reproducibility, share your raw data when possible. Check these steps before sharing:\n\n-   **Consent**. Ensure you have consent from the study participants and your institution to share the data.\n\n-   **Format**. Make sure your data is in open file format like .csv.\n\n-   **Documentation**. Include necessary documentation in the metadata folder (e.g., codebooks, readme, licenses, ethics). Use open file formats. See example codebook in the simulate-data notebook.\n\n-   **De-identify.** If needed, prepare a de-identified version of your raw data to manage the risk of identifying individuals in the dataset.\n\n\n::: callout-note\nWhat's a reproducible researcher's favorite movie?\\\n\"Groundhog Day\" -- they love seeing the same results every time! \n:::\n\n\n# STEP FOUR: Share code and data in open repository\n\nThe final step is to create an OSF project and upload the files there. Open Science Framework (OSF) is a free, open-source service that connects the entire research lifecycle: planning, execution, reporting, archiving, and discovery. Alternatively, you can use other services such as Zenodo, Figshare, or Github.\n\n1.  Create a user and/or login at: <https://osf.io/>\n2.  Create a new project in OSF (you may keep the project private when testing)\n3.  Create necessary folders with similar names as in your project folders. Start with these, maybe nothing else is needed: (data/raw, data/metadata, scripts)\n4.  Upload the files to the folders created (in our example: raw data and three script files)\n5.  Create a DOI (permanent link) for your project in OSF and start sharing!\n\n*Congrats on walking the first steps! In the fascinating world of reproducibility, there is always more. Advanced issues like dependency management, version control, licencing, and writing a full manuscript in RStudio are not covered here. See the links attached if you are interested in learning more. Who says making good science doesn't mean a lot of work?*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}